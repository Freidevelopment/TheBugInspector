@page "/tickets/create"

@using TheBugInspector.Client.Components.UI.Projects
@using TheBugInspector.Client.Components.UI.Tickets
@using TheBugInspector.Client.Helpers
@using TheBugInspector.Client.Services
@using TheBugInspector.Client.Services.Interfaces

@rendermode InteractiveAuto

@inject ITicketDTOService TicketService
@inject IProjectDTOService ProjectService
@inject NavigationManager Nav

@attribute [Authorize]

<PageTitle>BugInspector | Create Ticket</PageTitle>


<div class="container-xxl">

    <h3>New Ticket</h3>
    <span class="text-danger">@ErrorMessage</span>
    <div class="card bg-faded-primary">
        <div class="card-body">
            <TicketForm Ticket="Ticket"
                        OnSubmit="HandleSubmit"
                        IsNew="true" />

        </div>
    </div>
</div>

@code {
    #region Parameters
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion

    #region State

    private string? ErrorMessage = string.Empty;
    private UserInfo? userInfo;
    private TicketDTO? Ticket = new();
    private ProjectDTO? project;
    TicketDTO? ticketNav;
    #endregion

    #region Methods
    protected async override Task OnInitializedAsync()
    {
        try
        {
            ErrorMessage = string.Empty;

            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

            if (userInfo is not null && Ticket is not null)
            {
                project = await ProjectService.GetProjectByIdAsync(Id, userInfo.CompanyId);
                Ticket.SubmitterUserId = userInfo.UserId;

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            // Change this errormessage
            ErrorMessage = "Something went wrong, servers may be down or having issues. Please return at another time.";

        }
    }

    private async Task HandleSubmit(TicketDTO ticket)
    {


        try
        {
            if (userInfo is not null)
            {
                ticket.SubmitterUserId = userInfo.UserId;
                ticketNav = await TicketService.AddTicketAsync(ticket, userInfo.CompanyId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, servers may be down or having issues. Please return at another time.";

        }

        Nav.NavigateTo($"/tickets/Index/{ticketNav!.Id}");


    }
    #endregion
}
