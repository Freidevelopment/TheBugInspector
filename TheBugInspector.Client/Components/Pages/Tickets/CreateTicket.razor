@page "/tickets/create"

@using TheBugInspector.Client.Components.UI.Projects
@using TheBugInspector.Client.Components.UI.Tickets
@using TheBugInspector.Client.Helpers
@using TheBugInspector.Client.Services
@using TheBugInspector.Client.Services.Interfaces

@rendermode InteractiveWebAssembly

@inject ITicketDTOService TicketService
@inject NavigationManager Nav


<PageTitle>BugInspector | Create Ticket</PageTitle>


<div class="container-xxl">

    <h3>New Ticket</h3>
    <span class="text-danger">@ErrorMessage</span>
    <div class="card-shadow">
        <div class="card-body">
            <TicketForm Ticket="new TicketDTO()"
                        OnSubmit="HandleSubmit"
                        IsNew="true"/>

        </div>
    </div>
</div>

@code {
    #region Parameters
    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion

    #region State

    private string? ErrorMessage = string.Empty;
    private UserInfo? userInfo;
    #endregion

    #region Methods
    protected async override Task OnInitializedAsync()
    {
        try
        {
            ErrorMessage = string.Empty;

            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            // Change this errormessage
            ErrorMessage = "Something went wrong, check the DevTools";
        }
    }

    private async Task HandleSubmit(TicketDTO ticket)
    {
        try
        {
            ticket.SubmitterUserId = userInfo!.UserId;
            await TicketService.AddTicketAsync(ticket, userInfo!.CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, check the DevTools";
        }
        Nav.NavigateTo("/tickets/Index");
    }
    #endregion
}
