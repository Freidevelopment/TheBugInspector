@page "/tickets/Personal"

@using TheBugInspector.Client.Components.UI.Projects
@using TheBugInspector.Client.Components.UI.Tickets
@using TheBugInspector.Client.Helpers
@using TheBugInspector.Client.Services
@using TheBugInspector.Client.Services.Interfaces

@rendermode InteractiveAuto

@inject ITicketDTOService TicketService
@inject ICompanyDTOService CompanyService
@inject IProjectDTOService ProjectService

@attribute [Authorize(Roles = $"{nameof(Roles.ProjectManager)}, {nameof(Roles.Submitter)}, {nameof(Roles.Developer)}")]

<PageTitle>BugInspector | My Tickets</PageTitle>


<div class="container-xxl background-primary">

    @if (userInfo is not null)
    {

    }

    @if (activeTickets is not null)
    {
        <div class="row g-3">
            <div class="col-12 col-md-6">
                <h1>My Tickets</h1>
            </div>
            <div class="col-12 col-md-6 text-end">
                <a class="btn btn-primary" href="/tickets/create">Create Ticket</a>
            </div>


            @foreach (TicketDTO ticket in activeTickets)
            {
                <div class="col-12 col-md-6">
                    <TicketTable Ticket="ticket"
                                 UserInfo="userInfo"
                                 OnArchive="HandleArchive"
                                 OnRestore="HandleRestore" />

                </div>
            }




            <AuthorizeView Roles="ProjectManager" Context="ProjectManagerView">
                <div class="col-12">
                    <h1>My Archived Tickets</h1>

                </div>

                @foreach (TicketDTO ticket in archivedTickets)
                {
                    <div class="col-12 col-md-6">
                        <TicketTable Ticket="ticket"
                                     UserInfo="userInfo"
                                     OnArchive="HandleArchive"
                                     OnRestore="HandleRestore" />

                    </div>
                }


            </AuthorizeView>
        </div>

    }
    else
    {
        <span class="text-danger">@ErrorMessage</span>
    }
</div>

@code {
    #region Parameters
    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion

    #region State
    private IEnumerable<TicketDTO> activeTickets = [];
    private IEnumerable<TicketDTO> archivedTickets = [];
    private string? ErrorMessage = string.Empty;
    private UserInfo? userInfo;
    private string? userRole;
    #endregion

    #region Methods
    protected async override Task OnInitializedAsync()
    {
        try
        {
            ErrorMessage = string.Empty;

            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
            if (userInfo is not null)
            {

                userRole = await CompanyService.GetUserRoleAsync(userInfo.UserId, userInfo.CompanyId);
                if (userRole is not null)
                {
                    activeTickets = await TicketService.GetUserTicketsAsync(userInfo.CompanyId, userInfo.UserId);
                    archivedTickets = await TicketService.GetArchivedUserTicketsAsync(userInfo.CompanyId, userInfo.UserId);
                }
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            // Change this errormessage
            ErrorMessage = "Something went wrong, servers may be down or having issues. Please return at another time.";

        }
    }

    private async Task HandleArchive(int ticketId)
    {
        try
        {
            if (userInfo is not null)
            {
                await TicketService.ArchiveTicketAsync(ticketId, userInfo.CompanyId);

                activeTickets = await TicketService.GetUserTicketsAsync(userInfo.CompanyId, userInfo.UserId);
                archivedTickets = await TicketService.GetArchivedUserTicketsAsync(userInfo.CompanyId, userInfo.UserId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, servers may be down or having issues. Please return at another time.";

        }
    }

    private async Task HandleRestore(int ticketId)
    {
        try
        {
            if (userInfo is not null)
            {
                await TicketService.RestoreTicketAsync(ticketId, userInfo.CompanyId);

                activeTickets = await TicketService.GetUserTicketsAsync(userInfo.CompanyId, userInfo.UserId);
                archivedTickets = await TicketService.GetArchivedUserTicketsAsync(userInfo.CompanyId, userInfo.UserId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, servers may be down or having issues. Please return at another time.";

        }
    }
    #endregion
}

