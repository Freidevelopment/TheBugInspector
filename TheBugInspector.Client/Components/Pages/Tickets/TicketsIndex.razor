@page "/tickets/Index"

@using TheBugInspector.Client.Components.UI.Projects
@using TheBugInspector.Client.Components.UI.Tickets
@using TheBugInspector.Client.Helpers
@using TheBugInspector.Client.Services
@using TheBugInspector.Client.Services.Interfaces

@rendermode InteractiveAuto

@inject ITicketDTOService TicketService
@attribute [Authorize]

<PageTitle>BugInspector | ArchivedProjects</PageTitle>


<div class="container-xxl background-primary">


    @if (activeTickets is not null)
    {


        <div class="row row-cols-2">
            <div class="col">
                <h1>Active Tickets</h1>

            </div>
            <!-- Needs to be moved over to project details page-->
            <AuthorizeView>
                @if (context.User.IsInRole("Admin"))
                {
                    <div class="col text-end">
                        <a class="btn btn-primay bg-info" href="/tickets/create">Create Ticket?</a>
                    </div>
                }
            </AuthorizeView>
        </div>
        <table class="table table-hover table-bordered border-primary">
            <thead>
                <tr>
                    <th scope="col">Ticket Name</th>
                    <th scope="col">Ticket Created on</th>
                    <th scope="col">Ticket Updated on</th>
                    <th scope="col">Project</th>
                    <th scope="col">Ticket Priority</th>
                    <th scope="col">Ticket Status</th>
                    <th scope="col">Ticket Submitter</th>
                    <th scope="col">Number of Comments</th>
                    <AuthorizeView Roles="Admin">
                        <th scope="col">Archive Ticket</th>
                    </AuthorizeView>
                </tr>
            </thead>
            <tbody>
                @foreach (TicketDTO ticket in activeTickets)
                {
                    <TicketTable Ticket="ticket"
                                 UserInfo="userInfo"
                                 OnArchive="HandleArchive"
                                 OnRestore="HandleRestore" />
                }

            </tbody>

        </table>

        <div class="row row-cols-2">
            <div class="col">
                <h1>Archived Tickets</h1>

            </div>
        </div>
        <table class="table table-hover table-bordered border-primary">
            <thead>
                <tr>
                    <th scope="col">Ticket Name</th>
                    <th scope="col">Ticket Created on</th>
                    <th scope="col">Ticket Updated on</th>
                    <th scope="col">Ticket Type</th>
                    <th scope="col">Ticket Priority</th>
                    <th scope="col">Ticket Status</th>
                    <th scope="col">Ticket Submitter</th>
                    <th scope="col">Number of Comments</th>
                    <AuthorizeView Roles="Admin" Context="AdminArchivedView">
                        <th scope="col">Archive Ticket</th>
                    </AuthorizeView>
                </tr>
            </thead>
            <tbody>
                @foreach (TicketDTO ticket in archivedTickets)
                {
                    <TicketTable Ticket="ticket"
                                 UserInfo="userInfo"
                                 OnArchive="HandleArchive"
                                 OnRestore="HandleRestore" />
                }

            </tbody>

        </table>

    }
    else
    {
        <span class="text-danger">@ErrorMessage</span>
    }
</div>

@code {
    #region Parameters
    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion

    #region State
    private IEnumerable<TicketDTO> activeTickets = [];
    private IEnumerable<TicketDTO> archivedTickets = [];
    private string? ErrorMessage = string.Empty;
    private UserInfo? userInfo;
    #endregion

    #region Methods
    protected async override Task OnInitializedAsync()
    {
        try
        {
            ErrorMessage = string.Empty;

            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
            if (userInfo is not null)
            {
                activeTickets = await TicketService.GetAllTicketsAsync(userInfo.CompanyId);
                archivedTickets = await TicketService.GetAllArchivedTicketsAsync(userInfo.CompanyId);
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            // Change this errormessage
            ErrorMessage = "Something went wrong, check the DevTools";
        }
    }

    private async Task HandleArchive(int ticketId)
    {
        try
        {
            if (userInfo is not null)
            {
                await TicketService.ArchiveTicketAsync(ticketId, userInfo.CompanyId);

                activeTickets = await TicketService.GetAllTicketsAsync(userInfo.CompanyId);
                archivedTickets = await TicketService.GetAllArchivedTicketsAsync(userInfo.CompanyId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }

    private async Task HandleRestore(int ticketId)
    {
        try
        {
            if (userInfo is not null)
            {
                await TicketService.RestoreTicketAsync(ticketId, userInfo.CompanyId);

                activeTickets = await TicketService.GetAllTicketsAsync(userInfo.CompanyId);
                archivedTickets = await TicketService.GetAllArchivedTicketsAsync(userInfo.CompanyId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }
    #endregion
}
