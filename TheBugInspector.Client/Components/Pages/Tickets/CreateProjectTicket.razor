@page "/tickets/create/{id:int}"

@using TheBugInspector.Client.Components.UI.Projects
@using TheBugInspector.Client.Components.UI.Tickets
@using TheBugInspector.Client.Helpers
@using TheBugInspector.Client.Services
@using TheBugInspector.Client.Services.Interfaces

@rendermode InteractiveAuto

@inject ITicketDTOService TicketService
@inject IProjectDTOService ProjectService
@inject NavigationManager Nav

@attribute [Authorize]

<PageTitle>BugInspector | Create Ticket for Project</PageTitle>


<div class="container-xxl">
    <AuthorizeView>
        @if (userInfo is not null && project is not null && project.CompanyMembers.Any(c => c.UserId == userInfo.UserId) || context.User.IsInRole("Admin"))
        {

            <h3>New Ticket</h3>
            <span class="text-danger">@ErrorMessage</span>
            <div class="card-shadow">
                <div class="card-body">
                    <ProjectTicketForm Ticket="Ticket"
                                       Project="project"
                                       OnSubmit="HandleSubmit"
                                       IsNew="true" />

                </div>
            </div>
        }
        else
        {
            <h1 class="text-danger">You are not able to create a ticket for this project</h1>
        }
    </AuthorizeView>
    
</div>

@code {
    #region Parameters
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion

    #region State

    private string? ErrorMessage = string.Empty;
    private UserInfo? userInfo;
    private TicketDTO? Ticket = new();
    private ProjectDTO? project;
    #endregion

    #region Methods
    protected async override Task OnInitializedAsync()
    {
        try
        {
            ErrorMessage = string.Empty;

            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

            if (userInfo is not null && Ticket is not null)
            {
                project = await ProjectService.GetProjectByIdAsync(Id, userInfo.CompanyId);
                Ticket.SubmitterUserId = userInfo.UserId;

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            // Change this errormessage
            ErrorMessage = "Something went wrong, check the DevTools";
        }
    }

    private async Task HandleSubmit(TicketDTO ticket)
    {
        try
        {
            if (userInfo is not null)
            {
                ticket.SubmitterUserId = userInfo.UserId;
                await TicketService.AddTicketAsync(ticket, userInfo.CompanyId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, check the DevTools";
        }
        Nav.NavigateTo("/tickets/Index");
    }
    #endregion
}
