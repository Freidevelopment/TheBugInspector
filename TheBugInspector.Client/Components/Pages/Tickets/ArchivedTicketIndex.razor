@page "/tickets/archived"

@using TheBugInspector.Client.Components.UI.Projects
@using TheBugInspector.Client.Components.UI.Tickets
@using TheBugInspector.Client.Helpers
@using TheBugInspector.Client.Services
@using TheBugInspector.Client.Services.Interfaces

@rendermode InteractiveAuto

@inject ITicketDTOService TicketService
@inject IProjectDTOService ProjectService
@attribute [Authorize]

<PageTitle>BugInspector | Archived Tickets</PageTitle>


<div class="container-xxl background-primary">

    @if (archivedTickets is not null)
    {
        <div class="row g-3">
            <div class="col-12 offset-lg-1 pb-5 mb-2 mb-lg-4 pt-md-5 mt-n3 mt-md-0">
                <h1 class="pt-xl-1 mb-3 pb-2 pb-lg-3">Archived Tickets</h1>



            </div>
        </div>

        <div class="card bg-faded-primary p-3">

                <div class="table-responsive">
                    <table class="table table-hover table-bordered border-primary">
                        <thead>
                            <tr>
                                <th scope="col">Title</th>
                                <th scope="col">Last Updated</th>
                                <th scope="col">Project</th>
                                <th scope="col">Priority</th>
                                <th scope="col">Submitted By:</th>
                                <th scope="col">Developer Assigned:</th>
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (TicketDTO ticket in archivedTickets)
                            {

                                <TicketTable Ticket="ticket"
                                             UserInfo="userInfo"
                                             OnArchive="HandleArchive"
                                             OnRestore="HandleRestore" />


                            }

                        </tbody>
                    </table>
                </div>
            </div>



        

    }
    else
    {
        <span class="text-danger">@ErrorMessage</span>
    }
</div>

@code {
    #region Parameters
    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion

    #region State
    private IEnumerable<TicketDTO> activeTickets = [];
    private IEnumerable<TicketDTO> archivedTickets = [];
    private IEnumerable<ProjectDTO> projects = [];
    private string? ErrorMessage = string.Empty;
    private UserInfo? userInfo;
    #endregion

    #region Methods
    protected async override Task OnInitializedAsync()
    {
        try
        {
            ErrorMessage = string.Empty;

            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
            if (userInfo is not null)
            {
                projects = await ProjectService.GetAllProjectsCountAsync(userInfo.CompanyId);
                activeTickets = await TicketService.GetAllTicketsAsync(userInfo.CompanyId);
                archivedTickets = await TicketService.GetAllArchivedTicketsAsync(userInfo.CompanyId);
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            // Change this errormessage
            ErrorMessage = "Something went wrong, servers may be down or having issues. Please return at another time.";

        }
    }

    private async Task HandleArchive(int ticketId)
    {
        try
        {
            if (userInfo is not null)
            {
                await TicketService.ArchiveTicketAsync(ticketId, userInfo.CompanyId);

                activeTickets = await TicketService.GetAllTicketsAsync(userInfo.CompanyId);
                archivedTickets = await TicketService.GetAllArchivedTicketsAsync(userInfo.CompanyId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, servers may be down or having issues. Please return at another time.";

        }
    }

    private async Task HandleRestore(int ticketId)
    {
        try
        {
            if (userInfo is not null)
            {
                await TicketService.RestoreTicketAsync(ticketId, userInfo.CompanyId);

                activeTickets = await TicketService.GetAllTicketsAsync(userInfo.CompanyId);
                archivedTickets = await TicketService.GetAllArchivedTicketsAsync(userInfo.CompanyId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, servers may be down or having issues. Please return at another time.";

        }
    }
    #endregion
}
