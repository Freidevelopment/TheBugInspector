@page "/tickets/Index/{id:int}"

@using FreiBlogBuilder.Client.Helpers
@using TheBugInspector.Client.Components.UI.Projects
@using TheBugInspector.Client.Components.UI.Tickets
@using TheBugInspector.Client.Helpers
@using TheBugInspector.Client.Services
@using TheBugInspector.Client.Services.Interfaces

@rendermode InteractiveAuto

@inject ITicketDTOService TicketService
@inject IProjectDTOService ProjectService
@attribute [Authorize]

@if (ticket is not null)
{
    <PageTitle>BugInspector | Ticket:  @ticket.Title </PageTitle>

}
else
{
    <PageTitle>BugInspector | Ticket Details </PageTitle>
}


<div class="container-xxl">


    @if (ticket is not null)
    {
        <div class="row row-cols-2">
            <div class="col">
                <h1>Ticket Details: @ticket.Title</h1>
            </div>
            <div class="col text-end">
                <AuthorizeView>
                    @if (projectManager is not null && userInfo is not null)
                    {
                        @if (context.User.IsInRole("Admin") ||
                       context.User.IsInRole("ProjectManager") && userInfo.UserId == projectManager.UserId)
                        {
                            <a class="btn btn-warning" href="Tickets/edit/@ticket.Id">Edit?</a>
                        }
                        else if (userInfo.UserId == ticket.SubmitterUserId && userInfo.UserId == ticket.DeveloperUserId)
                        {
                            <a class="btn btn-warning" href="Tickets/edit/@ticket.Id">Edit?</a>
                        }
                        else if (userInfo.UserId == ticket.SubmitterUserId)
                        {
                            <a class="btn btn-warning" href="Tickets/submitter/edit/@ticket.Id">Edit?</a>
                        }
                        else if (userInfo.UserId == ticket.DeveloperUserId)
                        {
                            <a class="btn btn-warning" href="Tickets/developer/edit/@ticket.Id">Edit?</a>
                        }

                    }
                </AuthorizeView>
            </div>
        </div>


        <TicketDetailsCard Ticket="ticket" />


        <AuthorizeView>
            @if (projectManager is not null && userInfo is not null)
            {
                @if (context.User.IsInRole("Admin") ||
               context.User.IsInRole("ProjectManager") && userInfo.UserId == projectManager.UserId)
                {
                    <p class="text-end mt-3">
                        <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#CommentCreation" aria-expanded="false" aria-controls="TicketCreation">
                            add a comment?
                        </button>
                    </p>
                }
                else if (userInfo.UserId == ticket.SubmitterUserId)
                {
                    <p class="text-end mt-3">
                        <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#CommentCreation" aria-expanded="false" aria-controls="TicketCreation">
                            add a comment?
                        </button>
                    </p>
                }
                else if (userInfo.UserId == ticket.DeveloperUserId)
                {
                    <p class="text-end mt-3">
                        <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#CommentCreation" aria-expanded="false" aria-controls="TicketCreation">
                            add a comment?
                        </button>
                    </p>
                }

            }
        </AuthorizeView>

        <div class="collapse" id="CommentCreation">
            <div class="card card-body">
                <TicketCommentForm ticketComment="userComment"
                                   Id="ticket.Id"
                                   userInfo="userInfo"
                                   OnSubmit="CreateComment" />
            </div>
        </div>

        <AuthorizeView>
            @if (projectManager is not null && userInfo is not null)
            {
                @if (context.User.IsInRole("Admin") ||
               context.User.IsInRole("ProjectManager") && userInfo.UserId == projectManager.UserId)
                {
                    <div class="text-end">
                        <!-- Button trigger modal -->
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#AttachmentModal">
                            Add Attachment?
                        </button>
                    </div>
                }
                else if (context.User.IsInRole("Developer") && userInfo.UserId == ticket.DeveloperUserId)
                {
                    <div class="text-end">
                        <!-- Button trigger modal -->
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#AttachmentModal">
                            Add Attachment?
                        </button>
                    </div>
                }
                else if (userInfo.UserId == ticket.SubmitterUserId)
                {
                    <div class="text-end">
                        <!-- Button trigger modal -->
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#AttachmentModal">
                            Add Attachment?
                        </button>
                    </div>
                }

            }
        </AuthorizeView>

        @foreach (TicketCommentDTO comment in ticketComments)
        {
            <TicketComments Comment="comment"
                                ProjectManager="projectManager"
                                userInfo="userInfo"
                                OnDelete="DeleteComment"
                                OnUpdate="UpdateComment" />
        }

        <div class="row row-cols-3 g-3">
            @foreach (TicketAttachmentDTO attachment in ticket.Attachments)
            {
                <div class="col">

                    <AttachmentCards Attachment="attachment"
                                     ProjectManager="projectManager"
                                     userInfo="userInfo"
                                     OnSubmit="DeleteAttachment" />
                </div>
            }

        </div>

    }
    else
    {
        <span class="text-danger">@ErrorMessage</span>
    }
</div>

@if (ticket is not null)
{
    <!-- Modal -->
    <div class="modal fade" id="AttachmentModal" tabindex="-1" aria-labelledby="AttachmentModal" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content">
                <EditForm Model="newAttachment" OnSubmit="HandleSubmit" class="vstack gap-1">
                    <DataAnnotationsValidator />
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="AttachmentLabel">Add File to Ticket</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <InputFile OnChange="e => newFile = e.File" />
                        <InputText @bind-Value="newAttachment.Description"
                                   class="form-control"
                                   placeholder="Description (optional)">
                        </InputText>
                        <ValidationMessage For="() => newAttachment" />
                        <span class="text-danger">@ErrorMessage</span>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Upload</button>
                    </div>
                </EditForm>
            </div>
        </div>

    </div>

}

@code {
    #region Parameters
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    [Parameter]
    public EventCallback OnChange { get; set; }
    #endregion

    #region State

    private TicketAttachmentDTO newAttachment = new();
    private IBrowserFile? newFile; // <- this is bound to the file input element
    private TicketDTO? ticket;
    private string? ErrorMessage = string.Empty;
    private UserInfo? userInfo;
    private TicketCommentDTO? userComment;
    private IEnumerable<TicketCommentDTO> ticketComments = [];
    private UserDTO? projectManager;
    private ProjectDTO? project;
    #endregion

    #region Methods
    protected async override Task OnInitializedAsync()
    {
        try
        {
            ErrorMessage = string.Empty;

            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
            if (userInfo is not null)
            {
                ticket = await TicketService.GetTicketByIdAsync(Id, userInfo.CompanyId);

                ticketComments = await TicketService.GetTicketCommentsAsync(Id, userInfo.CompanyId);

                if (ticket is not null)
                {
                    project = await ProjectService.GetProjectByIdAsync(ticket.ProjectId, userInfo.CompanyId);

                    // fill out the fields we know about already
                    newAttachment.UserId = userInfo.UserId;
                    newAttachment.TicketId = ticket.Id;
                    newAttachment.Created = DateTime.Now;

                    if (project is not null)
                    {
                        projectManager = await ProjectService.GetProjectManagerAsync(project.Id, userInfo.CompanyId);

                    }


                    userComment = new TicketCommentDTO()
                        {
                            TicketId = ticket.Id,
                            UserId = userInfo.UserId,

                        };
                }
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            // Change this errormessage
            ErrorMessage = "Something went wrong, check the DevTools";
        }
    }

    private async Task CreateComment(TicketCommentDTO comment)
    {
        try
        {
            if (userInfo is not null && ticket is not null)
            {
                await TicketService.AddCommentAsync(comment, userInfo.CompanyId);
                ticketComments = await TicketService.GetTicketCommentsAsync(Id, userInfo.CompanyId);

                // ticket = await TicketService.GetTicketByIdAsync(Id, userInfo.CompanyId);

                userComment = new TicketCommentDTO()
                    {
                        TicketId = ticket.Id,
                        UserId = userInfo.UserId,

                    };

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, check the DevTools";
        }
    }

    private async Task UpdateComment(TicketCommentDTO comment)
    {
        try
        {
            if (userInfo is not null)
            {
                await TicketService.UpdateCommentAsync(comment, userInfo.CompanyId);

                ticketComments = await TicketService.GetTicketCommentsAsync(Id, userInfo.CompanyId);
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, check the DevTools";
        }
    }

    private async Task DeleteComment(int commentId)
    {
        try
        {
            if (userInfo is not null && ticket is not null)
            {
                await TicketService.DeleteCommentAsync(commentId, ticket.Id);

                ticketComments = await TicketService.GetTicketCommentsAsync(Id, userInfo.CompanyId);
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, check the DevTools";
        }
    }

    private async Task DeleteAttachment(int AttachmentId)
    {
        try
        {
            if (userInfo is not null)
            {
                await TicketService.DeleteTicketAttachment(AttachmentId, userInfo.CompanyId);

                ticket = await TicketService.GetTicketByIdAsync(Id, userInfo.CompanyId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, check the DevTools";
        }
    }

    private async Task HandleSubmit()
    {
        if (newFile is not null)
        {
            ErrorMessage = string.Empty;

            if (newFile.Size > ImageHelper.MaxFileSize)
            {
                ErrorMessage = "The File is too large to send";
            }
            else
            {


                try
                {

                    // get the byte[] and ContentType from the selected file
                    using var stream = newFile.OpenReadStream(ImageHelper.MaxFileSize);
                    using var ms = new MemoryStream();
                    await stream.CopyToAsync(ms);

                    byte[] fileData = ms.ToArray();
                    string fileType = newFile.ContentType;
                    newAttachment.FileName = newFile.Name;

                    // send the model and file data to the service
                    await TicketService.AddTicketAttachment(newAttachment,
                                                            fileData,
                                                            fileType,
                                                            userInfo.CompanyId);


                }
                catch (Exception ex)
                {
                    // TODO: display an error message if, e.g. file is too big
                    // or there was an error uploading the file
                    ErrorMessage = "The File is either too large to send or there was an error or there was and error uploading the file";
                    Console.WriteLine(ex);
                }

                // reset the form after this was successful
                newFile = null;
                newAttachment = new()
                    {

                        UserId = userInfo.UserId,
                        TicketId = ticket.Id,
                        Created = DateTime.Now
                    };



                // this can be replaced with however you want to update the page
                // after a file was saved
                await OnChange.InvokeAsync();

                ticket = await TicketService.GetTicketByIdAsync(Id, userInfo.CompanyId);
            }
        }
    }


    #endregion
}
