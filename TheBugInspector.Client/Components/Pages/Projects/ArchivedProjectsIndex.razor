@page "/archived/projects/Index"

@using TheBugInspector.Client.Components.UI.Projects
@using TheBugInspector.Client.Helpers
@using TheBugInspector.Client.Services
@using TheBugInspector.Client.Services.Interfaces

@rendermode InteractiveAuto

@inject IProjectDTOService ProjectService
@inject ICompanyDTOService CompanyService
@attribute [Authorize]
<PageTitle>BugInspector | ArchivedProjects</PageTitle>


<div class="container-xxl background-primary">


    @if (archivedProjects is not null)
    {

        <h1>Archived Projects</h1>


        @foreach (ProjectDTO project in archivedProjects)
        {
            <DisplayProjectCards @key="project.Id"
                                 Project="project"
                                 userInfo="userInfo"
                                 ProjectManagers="projectManagers"
                                 OnSubmit="HandleArchive"
                                 OnProjectIdSubmit="AssignProjectIdAsync"
                                 OnManagerSubmit="AssignProjectManager" />
        }



        <div class="text-end">
            <a href="/projects/Index" class=" text-primary">Go to Active Projects</a>
        </div>


    }
    else
    {
        <span class="text-danger">@ErrorMessage</span>
    }
</div>

@code {
    #region Parameters
    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion

    #region State
    private IEnumerable<ProjectDTO> archivedProjects = [];
    private IEnumerable<UserDTO> projectManagers = [];
    private string? ErrorMessage = string.Empty;
    private UserInfo? userInfo;
    private ProjectDTO? project;
    #endregion

    #region Methods
    protected async override Task OnInitializedAsync()
    {
        try
        {
            ErrorMessage = string.Empty;

            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
            if (userInfo is not null)
            {
                archivedProjects = await ProjectService.GetArchivedProjectsAsync(userInfo.CompanyId);
                projectManagers = await CompanyService.GetUsersInRoleAsync(nameof(Roles.ProjectManager), userInfo.CompanyId);

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            // Change this errormessage
            ErrorMessage = "Something went wrong, check the DevTools";
        }
    }

    private async Task HandleArchive(int projectId)
    {
        try
        {
            if (userInfo is not null)
            {
                await ProjectService.RestoreProjectAsync(projectId, userInfo.CompanyId);

                archivedProjects = await ProjectService.GetArchivedProjectsAsync(userInfo.CompanyId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }

    private async Task AssignProjectIdAsync(int projectId)
    {
        if (userInfo is not null)
        {
            project = await ProjectService.GetProjectByIdAsync(projectId, userInfo.CompanyId);

        }
    }
    private async Task AssignProjectManager(string memberId)
    {
        try
        {
            if (userInfo is not null && project is not null)
            {
                await ProjectService.AssignProjectManagerAsync(project.Id, memberId, userInfo.UserId);

                archivedProjects = await ProjectService.GetAllProjectsAsync(userInfo.CompanyId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }
    #endregion
}
