@page "/projects/details/{id:int}"

@using TheBugInspector.Client.Components.UI.Projects
@using TheBugInspector.Client.Components.UI.Tickets
@using TheBugInspector.Client.Helpers
@using TheBugInspector.Client.Services
@using TheBugInspector.Client.Services.Interfaces

@rendermode InteractiveAuto

@inject IProjectDTOService ProjectService
@inject ITicketDTOService TicketService


<PageTitle>BugInspector | Project Details</PageTitle>


<div class="container-xxl">

    <h3>Project Details</h3>
    <span class="text-danger">@ErrorMessage</span>
    @if (project is not null)
    {
        <ProjectDetailsCard Project="project" />


        <table class="table table-striped-columns table-info mt-5">
            <thead>
                <tr>
                    <th scope="col">Ticket Name</th>
                    <th scope="col">Ticket Created on</th>
                    <th scope="col">Ticket Updated on</th>
                    <th scope="col">Ticket Type</th>
                    <th scope="col">Ticket Priority</th>
                    <th scope="col">Ticket Status</th>
                    <th scope="col">Ticket Submitter</th>
                    <th scope="col">Number of Comments</th>
                    <th scope="col">Archive Ticket?</th>
                    <th scope="col">Edit Ticket?</th>
                </tr>
            </thead>
            <tbody>
                @foreach (TicketDTO ticket in project.Tickets)
                {
                    <TicketCards Ticket="ticket"
                                 OnArchive="HandleArchive"
                                 OnRestore="HandleRestore" />
                }

            </tbody>

        </table>

    }
</div>

@code {
    #region Parameters
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion

    #region State
    private ProjectDTO? project;
    private string? ErrorMessage = string.Empty;
    private UserInfo? userInfo;
    #endregion

    #region Methods
    protected async override Task OnInitializedAsync()
    {
        try
        {
            ErrorMessage = string.Empty;

            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

            project = await ProjectService.GetProjectByIdAsync(Id, userInfo!.CompanyId);

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            // Change this errormessage
            ErrorMessage = "Something went wrong, check the DevTools";
        }
    }

    private async Task HandleSubmit(ProjectDTO project)
    {
        try
        {
            await ProjectService.UpdateProjectAsync(project, userInfo!.CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, check the DevTools";
        }
    }

    private async Task HandleArchive(int ticketId)
    {
        try
        {
            await TicketService.ArchiveTicketAsync(ticketId, userInfo!.CompanyId);

            project!.Tickets = [.. await TicketService.GetAllTicketsAsync(userInfo!.CompanyId)];
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }

    private async Task HandleRestore(int ticketId)
    {
        try
        {
            await TicketService.RestoreTicketAsync(ticketId, userInfo!.CompanyId);

            project!.Tickets = [.. await TicketService.GetAllTicketsAsync(userInfo!.CompanyId)];
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }
    #endregion
}
