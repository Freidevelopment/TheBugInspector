@page "/projects/details/{id:int}"

@using TheBugInspector.Client.Components.UI.Projects
@using TheBugInspector.Client.Components.UI.Tickets
@using TheBugInspector.Client.Helpers
@using TheBugInspector.Client.Services
@using TheBugInspector.Client.Services.Interfaces

@rendermode InteractiveAuto

@inject ICompanyDTOService CompanyService
@inject IProjectDTOService ProjectService
@inject ITicketDTOService TicketService


<PageTitle>BugInspector | Project Details</PageTitle>


<div class="container-xxl">

    <div class="row row-cols-2">
        <div class="col">
            <h3>Project Details</h3>
        </div>
        <div class="col text-end">
            <AuthorizeView Context="ProjectDetailsAuthor">
                @if (ProjectDetailsAuthor.User.IsInRole("Admin") || ProjectDetailsAuthor.User.IsInRole("ProjectManager") && userInfo!.UserId == projectManager!.UserId)
                {
                    <a href="/projects/edit/@Id" class="btn btn-warning">Edit?</a>

                }

            </AuthorizeView>
        </div>
    </div>
    <span class="text-danger">@ErrorMessage</span>
    @if (project is not null)
    {
        <ProjectDetailsCard Project="project"
                            ProjectManager="projectManager"
                            Members="projectMembers" />


        <AuthorizeView Roles="Admin, ProjectManager">

            <div class="text-end">
                <!-- Button trigger modal -->
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#MemberAssignmentmodal">
                    Adjust members on Project?
                </button>

            </div>
        </AuthorizeView>

        <table class="table table-striped-columns table-info mt-5">
            <thead>
                <tr>
                    <th scope="col">Ticket Name</th>
                    <th scope="col">Ticket Created on</th>
                    <th scope="col">Ticket Updated on</th>
                    <th scope="col">Ticket Type</th>
                    <th scope="col">Ticket Priority</th>
                    <th scope="col">Ticket Status</th>
                    <th scope="col">Ticket Submitter</th>
                    <th scope="col">Number of Comments</th>
                    <th scope="col">Archive Ticket?</th>
                    <th scope="col">Edit Ticket?</th>
                </tr>
            </thead>
            <tbody>
                @foreach (TicketDTO ticket in project.Tickets)
                {
                    <TicketCards Ticket="ticket"
                                 OnArchive="HandleArchive"
                                 OnRestore="HandleRestore" />
                }

            </tbody>

        </table>



    }
</div>

@if (project is not null)
{
    <!-- Modal -->
    <div class="modal fade" id="MemberAssignmentmodal" tabindex="-1" aria-labelledby="MemberAssignmentmodal" aria-hidden="true">
        <ProjectMemberManagementModal ProjectManager="projectManager"
                                      userInfo="userInfo"
                                      Employees="companyMembers"
                                      OnSubmit="AssignProjectMembers"
                                      OnManagerSubmit="AssignProjectManager"
                                      OnManagerRemoval="RemoveProjectManager"
                                      OnMemberRemoval="RemoveProjectMember"
                                      Members="projectMembers" />

    </div>
}

@code {
    #region Parameters
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion

    #region State
    private ProjectDTO? project;
    private string? ErrorMessage = string.Empty;
    private UserInfo? userInfo;
    private UserDTO? projectManager;
    private string? managerAssignment;
    private IEnumerable<UserDTO?> projectMembers = [];
    private IEnumerable<UserDTO?> companyMembers = [];

    #endregion

    #region Methods
    protected async override Task OnInitializedAsync()
    {
        try
        {
            ErrorMessage = string.Empty;

            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

            project = await ProjectService.GetProjectByIdAsync(Id, userInfo!.CompanyId);

            projectManager = await ProjectService.GetProjectManagerAsync(Id, userInfo!.CompanyId);

            projectMembers = await ProjectService.GetProjectMembersAsync(Id, userInfo!.CompanyId);

            companyMembers = await CompanyService.GetCompanyMembersAsync(userInfo!.CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            // Change this errormessage
            ErrorMessage = "Something went wrong, check the DevTools";
        }
    }

    private async Task HandleSubmit(ProjectDTO project)
    {
        try
        {
            await ProjectService.UpdateProjectAsync(project, userInfo!.CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, check the DevTools";
        }
    }

    private async Task HandleArchive(int ticketId)
    {
        try
        {
            await TicketService.ArchiveTicketAsync(ticketId, userInfo!.CompanyId);

            project!.Tickets = [.. await TicketService.GetAllTicketsAsync(userInfo!.CompanyId)];
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }

    private async Task HandleRestore(int ticketId)
    {
        try
        {
            await TicketService.RestoreTicketAsync(ticketId, userInfo!.CompanyId);

            project!.Tickets = [.. await TicketService.GetAllTicketsAsync(userInfo!.CompanyId)];
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }

    private async Task AssignProjectMembers(string memberId)
    {
        try
        {

            await ProjectService.AddMemberToProjectAsync(Id, memberId, userInfo!.UserId);

            projectMembers = await ProjectService.GetProjectMembersAsync(Id, userInfo!.CompanyId);

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }

    private async Task AssignProjectManager(string memberId)
    {
        try
        {
            await ProjectService.AssignProjectManagerAsync(Id, memberId, userInfo!.UserId);

            projectManager = await ProjectService.GetProjectManagerAsync(Id, userInfo!.CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }

    private async Task RemoveProjectManager(string memberId)
    {
        try
        {
            await ProjectService.RemoveProjectManagerAsync(Id, userInfo!.UserId);

            projectMembers = await ProjectService.GetProjectMembersAsync(Id, userInfo!.CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }

    private async Task RemoveProjectMember(string memberId)
    {
        try
        {
            await ProjectService.RemoveMemberFromProjectAsync(Id, memberId, userInfo!.UserId);

            projectManager = await ProjectService.GetProjectManagerAsync(Id, userInfo!.CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }
    #endregion
}
