@page "/projects/details/{id:int}"

@using TheBugInspector.Client.Components.UI.Projects
@using TheBugInspector.Client.Components.UI.Tickets
@using TheBugInspector.Client.Helpers
@using TheBugInspector.Client.Services
@using TheBugInspector.Client.Services.Interfaces

@rendermode InteractiveAuto

@inject ICompanyDTOService CompanyService
@inject IProjectDTOService ProjectService
@inject ITicketDTOService TicketService

@attribute [Authorize]

<PageTitle>BugInspector | Project Details</PageTitle>


<div class="container-xxl">

    <div class="row row-cols-2">
        <div class="col">
            <h3>Project Details</h3>
        </div>
        <div class="col text-end">
            <AuthorizeView Context="ProjectDetailsAuthor">
                @if (userInfo is not null && projectManager is not null)
                {
                    @if (ProjectDetailsAuthor.User.IsInRole("Admin") || ProjectDetailsAuthor.User.IsInRole("ProjectManager") && userInfo.UserId == projectManager.UserId)
                    {
                        <a href="/projects/edit/@Id" class="btn btn-warning">Edit?</a>

                    }

                }

            </AuthorizeView>
        </div>
    </div>
    <span class="text-danger">@ErrorMessage</span>
    @if (project is not null)
    {
        <ProjectDetailsCard Project="project"
                            ProjectManager="projectManager"
                            Members="projectMembers" />


        <AuthorizeView Context="AdjustProjectMembers">
            @if (userInfo is not null)
            {
                @if (AdjustProjectMembers.User.IsInRole("Admin") || projectManager is not null && AdjustProjectMembers.User.IsInRole("ProjectManager") && userInfo.UserId == projectManager.UserId)
                {
                    <div class="text-end mt-3">
                        <button type="button" class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#MemberAssignmentmodal" aria-expanded="false" aria-controls="collapseExample">
                            Adjust members on Project?
                        </button>

                    </div>

                }

            }

            <div class="collapse" id="MemberAssignmentmodal">
                <div class="card card-body mt-3">
                    <ProjectMemberManagementModal ProjectManager="projectManager"
                                                  userInfo="userInfo"
                                                  Employees="companyMembers"
                                                  Members="projectMembers"
                                                  OnSubmit="AssignProjectMembers"
                                                  OnManagerSubmit="AssignProjectManager"
                                                  OnManagerRemoval="RemoveProjectManager"
                                                  OnMemberRemoval="RemoveProjectMember" />
                </div>
            </div>

        </AuthorizeView>

        <AuthorizeView Context="TicketCreation">
            @if (userInfo is not null)
            {
                @if (project.CompanyMembers.Any(c => c.UserId == userInfo.UserId) || TicketCreation.User.IsInRole("Admin"))
                {
                    <div class="text-end mt-3">
                        <a class="btn btn-primay bg-info" href="/tickets/create/@project.Id">Create Ticket?</a>
                    </div>

                }

            }
        </AuthorizeView>

        <h1 class="mt-3">Active Project Tickets</h1>
        <div class="table-responsive">

            <table class="table table-hover table-bordered border-info mt-5">
                <thead>
                    <tr>
                        <th scope="col">Ticket Name</th>
                        <th scope="col">Ticket Created on</th>
                        <th scope="col">Ticket Updated on</th>
                        <th scope="col">Ticket Type</th>
                        <th scope="col">Ticket Priority</th>
                        <th scope="col">Ticket Status</th>
                        <th scope="col">Ticket Submitter</th>
                        <th scope="col">Ticket Developer</th>
                        <th scope="col">Number of Comments</th>
                        <AuthorizeView Context="TicketAssignment">
                            @if (projectManager is not null && userInfo is not null)
                            {
                                @if (TicketAssignment.User.IsInRole("Admin") ||
                               TicketAssignment.User.IsInRole("ProjectManager") && userInfo.UserId == projectManager.UserId && projectManager is not null)
                                {
                                    <th scope="col">Archive Ticket</th>
                                    <th scope="col">Assign Developer</th>


                                }

                            }
                        </AuthorizeView>
                    </tr>
                </thead>
                <tbody>
                    @if (userInfo is not null)
                    {

                        @foreach (TicketDTO ticket in project.Tickets.Where(p => p.IsArchived == false).OrderByDescending(p => p.Created))
                        {
                            <TicketProjectDetailsTable Ticket="ticket"
                                                       UserInfo="userInfo"
                                                       ProjectManager="projectManager"
                                                       Members="projectMembers"
                                                       OnArchive="HandleArchive"
                                                       OnRestore="HandleRestore"
                                                       OnAssignDeveloper="AssignDeveloper" />
                        }

                    }
                </tbody>

            </table>
        </div>
        @if (project.Tickets.Any(t => t.IsArchived == true))
        {

            <h1 class="mt-3">Archived Project Tickets</h1>
            <div class="table-responsive">

                <table class="table table-hover table-bordered border-success mt-5 table-responsive">
                    <thead>
                        <tr>
                            <th scope="col">Ticket Name</th>
                            <th scope="col">Ticket Created on</th>
                            <th scope="col">Ticket Updated on</th>
                            <th scope="col">Ticket Type</th>
                            <th scope="col">Ticket Priority</th>
                            <th scope="col">Ticket Status</th>
                            <th scope="col">Ticket Submitter</th>
                            <th scope="col">Ticket Developer</th>
                            <th scope="col">Number of Comments</th>
                            <AuthorizeView Context="TicketAssignment">
                                @if (projectManager is not null && userInfo is not null)
                                {
                                    @if (TicketAssignment.User.IsInRole("Admin") ||
                                   TicketAssignment.User.IsInRole("ProjectManager") && userInfo.UserId == projectManager.UserId)
                                    {
                                        <th scope="col">Archive Ticket</th>
                                        <th scope="col">Assign Developer</th>


                                    }

                                }
                            </AuthorizeView>
                        </tr>
                    </thead>
                    <tbody>
                        @if (userInfo is not null)
                        {

                            @foreach (TicketDTO ticket in project.Tickets.Where(p => p.IsArchived == true).OrderByDescending(p => p.Created))
                            {
                                <TicketProjectDetailsTable Ticket="ticket"
                                                           UserInfo="userInfo"
                                                           ProjectManager="projectManager"
                                                           Members="projectMembers"
                                                           OnArchive="HandleArchive"
                                                           OnRestore="HandleRestore"
                                                           OnAssignDeveloper="AssignDeveloper" />
                            }

                        }
                    </tbody>

                </table>
            </div>
        }



    }
</div>


@code {
    #region Parameters
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion

    #region State
    private ProjectDTO? project;
    private string? ErrorMessage = string.Empty;
    private UserInfo? userInfo;
    private UserDTO? projectManager;
    private IEnumerable<UserDTO?> projectMembers = [];
    private IEnumerable<UserDTO?> companyMembers = [];

    #endregion

    #region Methods
    protected async override Task OnInitializedAsync()
    {
        try
        {
            ErrorMessage = string.Empty;

            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
            if (userInfo is not null)
            {
                project = await ProjectService.GetProjectByIdAsync(Id, userInfo.CompanyId);

                projectManager = await ProjectService.GetProjectManagerAsync(Id, userInfo.CompanyId);

                projectMembers = await ProjectService.GetProjectMembersAsync(Id, userInfo.CompanyId);

                companyMembers = await CompanyService.GetCompanyMembersAsync(userInfo.CompanyId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            // Change this errormessage
            ErrorMessage = "Something went wrong, servers may be down or having issues. Please return at another time.";

        }
    }

    private async Task HandleSubmit(ProjectDTO project)
    {
        try
        {
            if (userInfo is not null)
            {
                await ProjectService.UpdateProjectAsync(project, userInfo.CompanyId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, servers may be down or having issues. Please return at another time.";

        }
    }

    private async Task HandleArchive(int ticketId)
    {
        try
        {
            if (userInfo is not null && project is not null)
            {
                await TicketService.ArchiveTicketAsync(ticketId, userInfo.CompanyId);

                project = await ProjectService.GetProjectByIdAsync(Id, userInfo.CompanyId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, servers may be down or having issues. Please return at another time.";

        }
    }

    private async Task HandleRestore(int ticketId)
    {
        try
        {
            if (userInfo is not null && project is not null)
            {
                await TicketService.RestoreTicketAsync(ticketId, userInfo.CompanyId);

                project = await ProjectService.GetProjectByIdAsync(Id, userInfo.CompanyId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, servers may be down or having issues. Please return at another time.";

        }
    }

    private async Task AssignProjectMembers(string memberId)
    {
        try
        {
            if (userInfo is not null)
            {
                await ProjectService.AddMemberToProjectAsync(Id, memberId, userInfo.UserId);

                projectMembers = await ProjectService.GetProjectMembersAsync(Id, userInfo.CompanyId);
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, servers may be down or having issues. Please return at another time.";

        }
    }

    private async Task AssignProjectManager(string memberId)
    {
        try
        {
            if (userInfo is not null)
            {
                await ProjectService.AssignProjectManagerAsync(Id, memberId, userInfo.UserId);

                projectManager = await ProjectService.GetProjectManagerAsync(Id, userInfo.CompanyId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, servers may be down or having issues. Please return at another time.";

        }
    }

    private async Task RemoveProjectManager(string memberId)
    {
        try
        {
            if (userInfo is not null)
            {
                await ProjectService.RemoveProjectManagerAsync(Id, userInfo.UserId);

                projectManager = await ProjectService.GetProjectManagerAsync(Id, userInfo.CompanyId);
            }


        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, servers may be down or having issues. Please return at another time.";

        }
    }

    private async Task RemoveProjectMember(string memberId)
    {
        try
        {
            if (userInfo is not null)
            {
                await ProjectService.RemoveMemberFromProjectAsync(Id, memberId, userInfo.UserId);

                projectMembers = await ProjectService.GetProjectMembersAsync(Id, userInfo.CompanyId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, servers may be down or having issues. Please return at another time.";

        }
    }

    private async Task AssignDeveloper(TicketDTO ticket)
    {
        try
        {
            if (userInfo is not null)
            {
                await TicketService.UpdateTicketAsync(ticket, userInfo.CompanyId, userInfo.UserId);

                project = await ProjectService.GetProjectByIdAsync(Id, userInfo.CompanyId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, servers may be down or having issues. Please return at another time.";

        }
    }
    #endregion
}
