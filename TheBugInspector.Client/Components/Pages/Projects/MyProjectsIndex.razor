@page "/projects/personal/Index"

@using TheBugInspector.Client.Components.UI.Projects
@using TheBugInspector.Client.Helpers
@using TheBugInspector.Client.Services
@using TheBugInspector.Client.Services.Interfaces

@rendermode InteractiveAuto

@inject IProjectDTOService ProjectService
@inject ICompanyDTOService CompanyService
@inject NavigationManager Nav

@attribute [Authorize(Roles = $"{nameof(Roles.ProjectManager)}, {nameof(Roles.Submitter)}, {nameof(Roles.Developer)}")]
<PageTitle>BugInspector | MyProjects</PageTitle>


<div class="container-xxl background-primary">

    <div class="row row-cols-2">
        <div class="col">
            <h1>My Projects</h1>

        </div>
        <AuthorizeView Context="ProjectManagerView">
            @if (ProjectManagerView.User.IsInRole(Roles.ProjectManager.ToString()))
            {
                <div class="col text-end">
                    <a href="/projects/create" class="btn btn-primary">Create a Project?</a>
                </div>

            }

        </AuthorizeView>
    </div>

    @if (userInfo is not null)
    {
        @if (myProjects.Data.Count() > 0)
        {


            <div class="row row-cols-lg-3 row-cols-md-2 g-3">


                @foreach (ProjectDTO project in myProjects.Data)
                {
                    <div class="col">
                        <DisplayProjectCards @key="project.Id"
                                             Project="project"
                                             userInfo="userInfo"
                                             ProjectManagers="projectManagers"
                                             OnSubmit="HandleArchive"
                                             OnProjectIdSubmit="AssignProjectIdAsync"
                                             OnManagerSubmit="AssignProjectManager" />

                    </div>



                }

            </div>

            <div class="text-end">
                <a href="/archived/projects/Index" class="text-primary">Go to Archived Projects</a>
            </div>

            <div class="row gy-3 align-items-center mt-lg-5 pt-2 pt-md-4 pt-lg-0">
                <div class="col col-md-4 col-6 order-md-1 order-1">
                    @if (Page > 1)
                    {

                        <a class="btn btn-info w-md-auto w-100" type="button" href="@Nav.GetUriWithQueryParameter(nameof(Page), Page - 1)"><i class="ai-arrow-left fs-xl"></i></a>
                    }
                    @if (Page < myProjects.TotalPages)
                    {
                        <a class="btn btn-info w-md-auto w-100" type="button" href="@Nav.GetUriWithQueryParameter(nameof(Page), Page + 1)"><i class="ai-arrow-right fs-xl"></i></a>
                    }
                </div>
                <div class="col col-md-4 col-12 order-md-2 order-3 text-center">
                    <button class="btn btn-outline-success w-md-auto w-100" type="button"> Page @myProjects.Page of @myProjects.TotalPages</button>
                </div>
                <div class="col col-md-4 col-6 order-md-3 order-2">
                    <nav aria-label="Page navigation">
                        <ul class="pagination pagination-sm justify-content-end">
                            @for (int currentPage = 1; currentPage <= myProjects.TotalPages; currentPage++)
                            {
                                <li class="page-item"><a class="page-link" href="@Nav.GetUriWithQueryParameter(nameof(Page), Page = currentPage)">@currentPage</a></li>
                            }
                        </ul>
                    </nav>
                </div>
            </div>


        }
        else
        {
            <span class="text-danger">@ErrorMessage</span>
            <AuthorizeView Context="ProjectManagerView">
                @if (ProjectManagerView.User.IsInRole(Roles.ProjectManager.ToString()))
                {
                    <h1>
                        I am sorry but you have not been assinged to any Projects yet but you will be assigned shortly.
                        Or as a Project Manager you may create a new project.
                    </h1>

                }
                else
                {
                    <h1>I am sorry but you have not been assinged to any Projects yet but you will be assigned shortly</h1>

                }
            </AuthorizeView>
        }
    }


</div>

@code {
    #region Parameters
    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    [SupplyParameterFromQuery]
    public int Page { get; set; }
    #endregion

    #region State
    private PagedList<ProjectDTO> myProjects = new PagedList<ProjectDTO>();
    private IEnumerable<UserDTO> ProjectMembers = [];
    private IEnumerable<UserDTO> projectManagers = [];
    private string? ErrorMessage = string.Empty;
    private UserInfo? userInfo;
    private ProjectDTO? project;
    private int pageSize = 6;
    #endregion

    #region Methods
    protected async override Task OnInitializedAsync()
    {
        try
        {
            ErrorMessage = string.Empty;

            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
            if (userInfo is not null)
            {
                myProjects = await ProjectService.GetMyProjectsAsync(userInfo.CompanyId, userInfo.UserId, Page, pageSize);
                projectManagers = await CompanyService.GetUsersInRoleAsync(nameof(Roles.ProjectManager), userInfo.CompanyId);
            }
        }
        catch (Exception ex)  
        {
            Console.WriteLine(ex);
            // Change this errormessage
            ErrorMessage = "Something went wrong, servers may be down or having issues. Please return at another time.";
        }
    }

    private async Task HandleArchive(int projectId)
    {
        try
        {
            if (userInfo is not null)
            {
                await ProjectService.ArchiveProjectAsync(projectId, userInfo.CompanyId);

                myProjects = await ProjectService.GetMyProjectsAsync(userInfo.CompanyId, userInfo.UserId, Page, pageSize);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, servers may be down or having issues. Please return at another time.";
        }
    }

    private async Task AssignProjectIdAsync(int projectId)
    {
        if (userInfo is not null)
        {
            project = await ProjectService.GetProjectByIdAsync(projectId, userInfo.CompanyId);

        }
    }
    private async Task AssignProjectManager(string memberId)
    {
        try
        {
            if (userInfo is not null && project is not null)
            {
                await ProjectService.AssignProjectManagerAsync(project.Id, memberId, userInfo.UserId);

                myProjects = await ProjectService.GetAllProjectsAsync(userInfo.CompanyId, Page, pageSize);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, servers may be down or having issues. Please return at another time.";

        }
    }
    #endregion
}