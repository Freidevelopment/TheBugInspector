@page "/projects/personal/Index"

@using TheBugInspector.Client.Components.UI.Projects
@using TheBugInspector.Client.Helpers
@using TheBugInspector.Client.Services
@using TheBugInspector.Client.Services.Interfaces

@rendermode InteractiveAuto

@inject IProjectDTOService ProjectService
@inject ICompanyDTOService CompanyService

@attribute [Authorize(Roles = $"{nameof(Roles.ProjectManager)}, {nameof(Roles.Submitter)}, {nameof(Roles.Developer)}")]
<PageTitle>BugInspector | MyProjects</PageTitle>


<div class="container-xxl background-primary">

    <div class="row row-cols-2">
        <div class="col">
            <h1>My Projects</h1>

        </div>
        <AuthorizeView Context="ProjectManagerView">
            @if(ProjectManagerView.User.IsInRole(Roles.ProjectManager.ToString()))
            {
            <div class="col text-end">
                <a href="/projects/create" class="btn btn-primary">Create a Project?</a>
            </div>
                
            }

        </AuthorizeView>
    </div>

    @if (userInfo is not null)
    {
        @if (myProjects is not null)
        {


            <div class="row row-cols-lg-3 row-cols-md-2 g-3">


                @foreach (ProjectDTO project in myProjects)
                {
                    <div class="col">
                        <DisplayProjectCards @key="project.Id"
                                             Project="project"
                                             userInfo="userInfo"
                                             ProjectManagers="projectManagers"
                                             OnSubmit="HandleArchive"
                                             OnProjectIdSubmit="AssignProjectIdAsync"
                                             OnManagerSubmit="AssignProjectManager" />

                    </div>



                }

            </div>

            <div class="text-end">
                <a href="/archived/projects/Index" class="text-primary">Go to Archived Projects</a>
            </div>


        }
        else
        {
            <span class="text-danger">@ErrorMessage</span>
        }
    }


</div>

@code {
    #region Parameters
    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion

    #region State
    private IEnumerable<ProjectDTO> myProjects = [];
    private IEnumerable<UserDTO> ProjectMembers = [];
    private IEnumerable<UserDTO> projectManagers = [];
    private string? ErrorMessage = string.Empty;
    private UserInfo? userInfo;
    private ProjectDTO? project;
    #endregion

    #region Methods
    protected async override Task OnInitializedAsync()
    {
        try
        {
            ErrorMessage = string.Empty;

            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
            if (userInfo is not null)
            {
                myProjects = await ProjectService.GetMyProjectsAsync(userInfo.CompanyId, userInfo.UserId);
                projectManagers = await CompanyService.GetUsersInRoleAsync(nameof(Roles.ProjectManager), userInfo.CompanyId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            // Change this errormessage
            ErrorMessage = "Something went wrong, check the DevTools";
        }
    }

    private async Task HandleArchive(int projectId)
    {
        try
        {
            if (userInfo is not null)
            {
                await ProjectService.ArchiveProjectAsync(projectId, userInfo.CompanyId);

                myProjects = await ProjectService.GetAllProjectsAsync(userInfo.CompanyId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, check the DevTools";
        }
    }

    private async Task AssignProjectIdAsync(int projectId)
    {
        if (userInfo is not null)
        {
            project = await ProjectService.GetProjectByIdAsync(projectId, userInfo.CompanyId);

        }
    }
    private async Task AssignProjectManager(string memberId)
    {
        try
        {
            if (userInfo is not null && project is not null)
            {
                await ProjectService.AssignProjectManagerAsync(project.Id, memberId, userInfo.UserId);

                myProjects = await ProjectService.GetAllProjectsAsync(userInfo.CompanyId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }
    #endregion
}