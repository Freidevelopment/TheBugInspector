@page "/tasker"
@using TheBugInspector.Client.Helpers

@inject ITaskerItemService _TaskerItemService

@rendermode InteractiveAuto

@attribute [Authorize]

<div class="d-flex justify-content-center align-items-center">
    <div class="task p-5">
        <div class="p-2 text-center mb-3">
            <img src="/img/Tasker_600.png" width="300px" />
        </div>
        <div>
            <EditForm Model="taskerItem" OnSubmit="AddTaskerItem">
                <div class="hstack gap-2">
                    <InputText class="form-control"
                               placeholder="Enter a Task"
                               @bind-Value="@taskerItem.Name"
                               @ref=formInput></InputText>
                    <button type="submit" class="btn btn-primary">Add</button>
                </div>
            </EditForm>
        </div>
        <hr />
        <div class="text-danger text-center">
            @errorMessage
        </div>
        <div class="vstack gap-3">
            @if(taskerItemsList is not null)
            {
                @foreach (TaskerItemDTO item in taskerItemsList)
                {
                    <TaskerLine Todo="item"
                                OnDelete="DeleteTaskerItem"
                                OnUpdate="UpdateTaskerItem"/>
                } 
            }
        </div>
    </div>
</div>

@code {
    private InputText? formInput;

    private TaskerItemDTO taskerItem = new TaskerItemDTO();
    private List<TaskerItemDTO> taskerItems = new();
    private IEnumerable<TaskerItemDTO>? taskerItemsList = new List<TaskerItemDTO>();
    string errorMessage = string.Empty;
    //string errorMessageColor = string.Empty;

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    private UserInfo? userInfo;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

            taskerItemsList = (await _TaskerItemService.GetTaskerItemsAsync(userInfo!.UserId)).ToList();
            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            //errorMessageColor = "text-danger";
            errorMessage = "Could not load your Tasker Items. Please try again later.";
        }
    }

    private async Task AddTaskerItem()
    {
        try
        {
            await _TaskerItemService.CreateTaskerItemAsync(taskerItem, userInfo!.UserId);

            taskerItem = new TaskerItemDTO();
            // This sends our new formTaskerItem to the API which creates a new one in the database
            taskerItemsList = (await _TaskerItemService.GetTaskerItemsAsync(userInfo!.UserId)).ToList();
            // This now makes our list from the API database,
            // this will make everything in sync with the client side
            errorMessage = string.Empty;

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            //errorMessageColor = "text-danger";
            errorMessage = "Failed to add a new Item. Please try again later.";
        }

        // put the text cursor back on the input box
        if (formInput?.Element is not null)
        {
            await formInput.Element.Value.FocusAsync();
        }
    }

    private async Task DeleteTaskerItem(TaskerItemDTO taskerItem)
    {
        try
        {
            errorMessage = string.Empty;
            // Delete the item from the DB
            await _TaskerItemService.DeleteTaskerItemAsync(taskerItem.Id, userInfo!.UserId);
            // get the latest data from the DB to update the page
            taskerItemsList = (await _TaskerItemService.GetTaskerItemsAsync(userInfo!.UserId)).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            //errorMessageColor = "text-danger";
            errorMessage = "Failed to delete the selected Tasker Item. Please try again later.";
        }
        // if (errorMessage == string.Empty)
        // {
        //     //errorMessageColor = "text-success";
        //     errorMessage = "Item has been successfully Deleted";
        // }

    }

    private async Task UpdateTaskerItem(TaskerItemDTO updatedItem)
    {
        try
        {
            errorMessage = string.Empty;
            await _TaskerItemService.UpdateTaskerItemAsync(updatedItem.Id, updatedItem, userInfo!.UserId);
            taskerItemsList = (await _TaskerItemService.GetTaskerItemsAsync(userInfo!.UserId)).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            //errorMessageColor = "text-danger";
            errorMessage = "Failed to update the selected Tasker Item. Please try again later.";
        }
        // if(errorMessage == string.Empty)
        // {
        //     //errorMessageColor = "text-success";
        //     errorMessage = "Item has been successfully updated";
        // }
    }
}
