@page "/companies/manageRoles"
@using TheBugInspector.Client.Components.UI.Companies
@using TheBugInspector.Client.Helpers

@inject ICompanyDTOService CompanyService

@rendermode InteractiveWebAssembly

@attribute [Authorize(Roles =$"{nameof(Roles.Admin)}")]
<PageTitle>BugInspector | Manage Employee roles</PageTitle>

@if (company is not null)
{


    <div class="container">
        <div class="text-center">
            <h1>@company.Name</h1>
           
            <div class="mt-5 mb-5">
                <div>
                    <h2>Company Members</h2>
                </div>
                <div class="row">

                    @foreach (UserDTO member in Members)
                    {
                        <div class="col-md-6">
                            <ManageRolesCards @key="member.UserId"
                                                   User="member"
                                                   UserInfo="userInfo"
                                                   OnSubmit="UpdateRole" />

                        </div>
                    }


                </div>
            </div>

        </div>
    </div>
}

@code {
    #region Parameters
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion

    #region State
    private CompanyDTO? company;
    private string? ErrorMessage = string.Empty;
    private IEnumerable<UserDTO> Members = [];
    private UserInfo? userInfo;
    private IEnumerable<UserDTO> projectManagers = [];
    #endregion

    #region Methods
    protected override async Task OnInitializedAsync()
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
            if (userInfo is not null)
            {
                company = await CompanyService.GetCompanyByIdAsync(userInfo.CompanyId);
                Members = await CompanyService.GetCompanyMembersAsync(userInfo.CompanyId);
                projectManagers = await CompanyService.GetUsersInRoleAsync(nameof(Roles.ProjectManager), userInfo.CompanyId);

            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, check the Devtools";
        }
    }

    private async Task UpdateRole(UserDTO user)
    {
        try
        {
            if (userInfo is not null && company is not null)
            {
                await CompanyService.UpdateUserRoleAsync(user, userInfo.UserId);

                Members = await CompanyService.GetCompanyMembersAsync(company.Id);

                projectManagers = await CompanyService.GetUsersInRoleAsync(nameof(Roles.ProjectManager), userInfo.CompanyId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, check the Devtools";
        }
    }
    #endregion

}
