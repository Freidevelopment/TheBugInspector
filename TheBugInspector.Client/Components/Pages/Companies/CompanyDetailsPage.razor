@page "/companies/Index"
@using TheBugInspector.Client.Components.UI.Companies
@using TheBugInspector.Client.Helpers

@inject ICompanyDTOService CompanyService

@rendermode InteractiveAuto
@attribute [Authorize]

<PageTitle>BugInspector | Company</PageTitle>

@if (company is not null && userInfo is not null)
{


    <div class="container">
        <!-- About -->
        <section class="container my-5 py-lg-5 py-md-4 py-3">
            <div class="row gy-4 py-xl-3">
                <div class="col-md-6">
                    <img src="@company.ImageUrl" alt="Image" class="rounded-3">
                </div>
                <div class="col-lg-5 col-md-6 offset-lg-1 d-flex">
                    <div class="align-self-center ps-lg-0 ps-md-4">
                        <h2 class="h1 mb-lg-4 mb-3">@company.Name</h2>
                        <p class="mb-4 pb-lg-3 fs-lg">
                            @company.Description
                        </p>
                        <div class="d-flex align-items-center ms-sm-n4 ms-n3 mb-4 pb-lg-3">
                            <div class="ms-sm-4 ms-3">
                                <a href="/projects" class="btn btn-outline-primary">Active Projects</a>
                            </div>
                            <div class="ms-sm-4 ms-3">
                                <a href="/archived/projects" class="btn btn-outline-primary">Archived Projects</a>
                            </div>
                            <AuthorizeView Context="AdminCompanyControl">
                                @if (AdminCompanyControl.User.IsInRole("Admin") && company.Id == userInfo.CompanyId)
                                {
                                    <div class="ms-sm-4 ms-3">
                                        <a href="/Company/Edit/@company.Id" class="btn btn-outline-primary">
                                            Edit Company Page
                                        </a>

                                    </div>
                                }
                            </AuthorizeView>

                        </div>
                    </div>

                </div>
            </div>
        </section>

        <section class="container py-5 my-md-3 my-lg-5">
            <h2 class="h1 text-center pt-1 pb-3 mb-3 mb-lg-4">Our Employees</h2>
            <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4">

                @foreach (UserDTO member in Members)
                {
                    <div class="col">
                        <CompanyMembersDisplay @key="member.UserId"
                                               User="member"
                                               UserInfo="userInfo"
                                               OnSubmit="UpdateRole" />

                    </div>
                }
            </div>
        </section>
    </div>


}

else
{
    <h1 class="text-danger">@ErrorMessage</h1>
}

@code {
    #region Parameters
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion

    #region State
    private CompanyDTO? company;
    private string? ErrorMessage = string.Empty;
    private IEnumerable<UserDTO> Members = [];
    private UserInfo? userInfo;
    private IEnumerable<UserDTO> projectManagers = [];
    #endregion

    #region Methods
    protected override async Task OnInitializedAsync()
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
            if (userInfo is not null)
            {
                company = await CompanyService.GetCompanyByIdAsync(userInfo.CompanyId);
                Members = await CompanyService.GetCompanyMembersAsync(userInfo.CompanyId);
                projectManagers = await CompanyService.GetUsersInRoleAsync(nameof(Roles.ProjectManager), userInfo.CompanyId);

            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, servers may be down or having issues. Please return at another time.";

        }
    }

    private async Task UpdateRole(UserDTO user)
    {
        try
        {
            if (userInfo is not null && company is not null)
            {
                await CompanyService.UpdateUserRoleAsync(user, userInfo.UserId);

                Members = await CompanyService.GetCompanyMembersAsync(company.Id);

                projectManagers = await CompanyService.GetUsersInRoleAsync(nameof(Roles.ProjectManager), userInfo.CompanyId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "Something went wrong, servers may be down or having issues. Please return at another time.";

        }
    }
    #endregion

}
