@page "/dashboard"
@using ApexCharts
@using TheBugInspector.Client.Components.UI.Charts
@using TheBugInspector.Client.Helpers

@inject ICompanyDTOService CompanyService
@inject IProjectDTOService ProjectService
@inject ITicketDTOService TicketService

@rendermode InteractiveAuto
@attribute [Authorize]

<PageTitle>BugInspector | Company Dashboard</PageTitle>

@if (userInfo is not null && user is not null && company is not null)
{
    <div class="container-xxl">
        <AuthorizeView>


            <div class="row g-3">
                <div class="col-12 col-md-2">
                </div>
                <div class="col-12 col-md-8">
                    <!-- Primary background on hover -->
                    <div class="card border-primary bg-faded-primary">
                        <div class="card-body">
                            <h5 class="card-title text-primary">Information: @userInfo.FullName</h5>
                            <div class="row">
                                <div class="col-6">
                                    <img src="@userInfo.ProfilePictureUrl" class="rounded-circle" height="50" width="100" />
                                </div>
                                <div class="col-6">
                                    <p class="card-text text-primary">Role:@user.Role</p>

                                    <a class="btn btn-outline-primary" href="/Account/Manage">Manage Account</a>
                                </div>
                                <div class="col-12">
                                    <p class="card-text text-primary">Email: @userInfo.Email</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-2">
                </div>

                @if (context.User.IsInRole("Admin"))
                {
                    <div class="col-12 col-md-4">
                        <!-- Primary card -->
                        <div class="card border-primary bg-faded-primary mt-3 h-100">
                            <div class="card-header border-primary "><h4 class="text-primary">All Tickets:</h4></div>
                            <div class="card-body text-center">
                                <h1 class="text-primary card-title"> @tickets.Count()</h1>


                                <a href="/tickets/active" class="btn btn-outline-primary text-end">All active tickets</a>


                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-md-4">
                        <div class="card border-primary bg-faded-primary mt-3 h-100">
                            <div class="card-header border-primary "><h4 class="text-primary">Assigned Tickets:</h4></div>
                            <div class="card-body text-center">
                                @if (assignedTickets is not null)
                                {
                                    <h1 class="text-primary card-title">@assignedTickets.Count()</h1>


                                }

                                <a href="/tickets/active" class="btn btn-outline-primary text-end">All active tickets</a>


                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-md-4">
                        <div class="card border-danger bg-faded-danger mt-3 h-100">
                            <div class="card-header border-danger "><h4 class="text-danger">Unassigned Tickets:</h4></div>
                            <div class="card-body text-center">
                                @if (unassignedTickets is not null)
                                {
                                    <h1 class="card-title text-danger">@unassignedTickets.Count()</h1>


                                }

                                <a href="/tickets/active" class="btn btn-outline-danger text-end">All active tickets</a>


                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="col-12 col-md-4">
                        <!-- Primary card -->
                        <div class="card border-primary bg-faded-primary mt-3">
                            <div class="card-header border-primary h4 text-primary">My Tickets: </div>
                            <div class="card-body text-center">
                                <h1 class="card-title text-primary">@tickets.Count()</h1>



                                <a href="/tickets/Personal" class="btn btn-outline-primary text-end">My tickets</a>

                            </div>
                        </div>
                    </div>

                }

                @if (context.User.IsInRole("Admin"))
                {
                    <div class="col-2">
                    </div>
                }

                <div class="col-12 col-md-4">

                    <div class="card border-primary bg-faded-primary mt-3">
                        <div class="card-header border-primary text-primary h4">Active Projects:</div>
                        <div class="card-body text-center">
                            <h1 class="card-title text-primary">@projects.Count()</h1>
                            @if (context.User.IsInRole("Admin"))
                            {
                                <a href="/projects" class=" btn btn-outline-primary text-end">All Active Projects</a>

                            }
                            else
                            {
                                <a href="/projects/personal" class="btn btn-outline-primary text-end">My Projects</a>
                            }

                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-4">

                    @* get rid of card only need link to company page*@
                    <div class="card border-primary bg-faded-primary mt-3">
                        <div class="card-header border-primary text-primary h4">Employees:</div>
                        <div class="card-body text-center">
                            <h1 class="card-title text-primary">@Members.Count()</h1>
                            <a href="/companies" class="btn btn-outline-primary text-primary">@company.Name page</a>
                        </div>
                    </div>
                </div>

                @if (context.User.IsInRole("Admin"))
                {
                    <div class="col-2">
                    </div>
                }

                @if (context.User.IsInRole(nameof(Roles.Admin)))
                {
                    <div class="col-12 col-md-4">
                        <div class="card border-primary bg-faded-primary mt-3 h-100">
                            <div class="card-header border-primary text-primary h4">Project Managers</div>
                            <div class="card-body">
                                <ul>
                                    @foreach (UserDTO PM in Members)
                                    {
                                        if (PM.Role == nameof(Roles.ProjectManager))
                                        {
                                            <li class="list-item">
                                                <a class="text-info">@PM.FullName</a>
                                            </li>

                                        }
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>

                    <div class="col-12 col-md-4">
                        <div class="card border-primary bg-faded-primary mt-3 h-100">
                            <div class="card-header border-primary text-primary h4">Developers</div>
                            <div class="card-body">
                                <ul>
                                    @foreach (UserDTO user in Members)
                                    {
                                        if (user.Role == nameof(Roles.Developer))
                                        {
                                            <li class="list-item">
                                                <a class="text-primary"><u>@user.FullName</u></a>
                                            </li>

                                        }
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>

                    <div class="col-12 col-md-4">
                        <div class="card border-primary bg-faded-primary mt-3 h-100">
                            <div class="card-header border-primary text-primary h4">Submitters</div>
                            <div class="card-body">
                                <ul>
                                    @foreach (UserDTO user in Members)
                                    {
                                        if (user.Role == nameof(Roles.Submitter))
                                        {
                                            <li class="list-item">
                                                <a class="text-primary"><u>@user.FullName</u></a>
                                            </li>

                                        }
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>
                }

                <div class="col-12 col-md-6">
                    <div class="card border-primary bg-faded-primary mt-3">
                        <div class="card-header border-primary text-primary h4">Recent active Tickets</div>
                        <div class="card-body">
                            <div class="list-group">
                                @foreach (TicketDTO ticket in recentActiveTickets)
                                {

                                    <a class="text-primary list-group-item list-group-item-action" href="/tickets/Index/@ticket.Id">@ticket.Title</a>

                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-6">
                    <div class="card border-primary bg-faded-primary mt-3">
                        <div class="card-header border-primary text-primary h4">Recent archived Tickets</div>
                        <div class="card-body">
                            <div class="list-group">
                                @foreach (TicketDTO ticket in recentArchivedTickets)
                                {

                                    <a class="text-primary list-group-item list-group-item-action" href="/tickets/Index/@ticket.Id">@ticket.Title</a>


                                }
                            </div>
                        </div>
                    </div>
                </div>


                @* <h1 class="text-center">Charts:</h1>
            <div class="col-12">

            </div> *@
            </div>
        </AuthorizeView>
    </div>
}


@code {
    #region Parameters
    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion

    #region State
    private CompanyDTO? company;
    private string? ErrorMessage = string.Empty;
    private IEnumerable<UserDTO> Members = [];
    private UserInfo? userInfo;
    private UserDTO? user;
    private IEnumerable<TicketDTO> tickets = [];
    private IEnumerable<TicketDTO> assignedTickets = [];
    private IEnumerable<TicketDTO> unassignedTickets = [];
    private IEnumerable<TicketDTO> recentActiveTickets = [];
    private IEnumerable<TicketDTO> recentArchivedTickets = [];
    private IEnumerable<ProjectDTO> projects = [];
    #endregion

    #region Methods
    protected override async Task OnInitializedAsync()
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

            if (userInfo is not null)
            {
                company = await CompanyService.GetCompanyByIdAsync(userInfo.CompanyId);
                Members = await CompanyService.GetCompanyMembersAsync(userInfo.CompanyId);
                user = Members.FirstOrDefault(m => m.UserId == userInfo.UserId);
                if (user is not null && user.Role == Roles.Admin.GetDisplayName())
                {
                    tickets = await TicketService.GetAllTicketsAsync(userInfo.CompanyId);
                    projects = await ProjectService.GetAllProjectsCountAsync(userInfo.CompanyId);
                    recentActiveTickets = await TicketService.GetMostRecentActiveTicketsAsync(userInfo.CompanyId);
                    recentArchivedTickets = await TicketService.GetMostRecentArchivedTicketsAsync(userInfo.CompanyId);
                    assignedTickets = tickets.Where(t => t.DeveloperUser != null);
                    unassignedTickets = tickets.Where(t => t.DeveloperUser == null);

                }
                else
                {
                    tickets = await TicketService.GetUserTicketsAsync(userInfo.CompanyId, userInfo.UserId);
                    projects = await ProjectService.GetMyProjectsCountAsync(userInfo.CompanyId, userInfo.UserId);
                    recentActiveTickets = await TicketService.GetRecentUserTicketsAsync(userInfo.CompanyId, userInfo.UserId);
                    recentArchivedTickets = await TicketService.GetRecentArchivedUserTicketsAsync(userInfo.CompanyId, userInfo.UserId);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }



    #endregion
}
