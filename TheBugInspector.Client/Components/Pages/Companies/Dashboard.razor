@page "/dashboard"
@using ApexCharts
@using TheBugInspector.Client.Components.UI.Charts
@using TheBugInspector.Client.Helpers

@inject ICompanyDTOService CompanyService
@inject IProjectDTOService ProjectService
@inject ITicketDTOService TicketService

@rendermode InteractiveAuto
@attribute [Authorize]

<PageTitle>BugInspector | Company Dashboard</PageTitle>

@if (userInfo is not null && user is not null && company is not null)
{
    <div class="container-xxl">
        <AuthorizeView>


            <div class="row">
                <div class="col-6">
                    <!-- Primary background on hover -->
                    <div class="card border-primary bg-faded-primary">
                        <div class="card-body">
                            <h5 class="card-title">Information: @userInfo.FullName</h5>
                            <div class="row">
                                <div class="col-6">
                                    <img src="@userInfo.ProfilePictureUrl" class="rounded-circle" height="50" width="100" />
                                </div>
                                <div class="col-6">
                                    <p class="card-text">Role:@user.Role</p>
                                    
                                    <a class="text-primary" href="/Account/Manage"><u>Manage Account</u></a>
                                </div>
                                <div class="col-12">
                                    <p class="card-text">Email: @userInfo.Email</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="col-12 col-md-4">

                    <!-- Primary card -->
                    <div class="card border-primary bg-faded-primary mt-3">
                        <div class="card-header border-primary text-primary">Active Tickets:</div>
                        <div class="card-body text-center">
                            <h1 class="card-title text-primary">@tickets.Count()</h1>
                            @if (context.User.IsInRole("Admin"))
                            {
                                <a href="/tickets/active/Index" class=" text-end text-primary"><u>All active tickets</u></a>

                            }
                            else
                            {
                                <a href="/tickets/Personal/Index" class=" text-end text-primary"><u>My tickets</u></a>
                            }
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-4">

                    <div class="card border-primary bg-faded-primary mt-3">
                        <div class="card-header border-primary text-primary">Active Projects:</div>
                        <div class="card-body text-center">
                            <h1 class="card-title text-primary">@projects.Count()</h1>
                            @if (context.User.IsInRole("Admin"))
                            {
                                <a href="/projects/Index" class="text-end text-primary"><u>All Active Projects</u></a>

                            }
                            else
                            {
                                <a href="/projects/personal/Index" class="text-end text-primary"><u>My Projects</u></a>
                            }
                            
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-4">

                    @* get rid of card only need link to company page*@
                    <div class="card border-primary bg-faded-primary mt-3">
                        <div class="card-header border-primary text-primary">@company.Name: Employees</div>
                        <div class="card-body text-center">
                            <h1 class="card-title text-primary">@Members.Count()</h1>
                            <a href="/companies/Index" class=" text-end text-primary mt-3"><u>@company.Name page</u></a>
                        </div>
                    </div>
                </div>

                <div class="col-12 col-md-6">
                    <div class="card border-primary bg-faded-primary mt-3">
                        <div class="card-header border-primary text-primary">Recent active Tickets</div>
                        <div class="card-body text-center">
                            <ul>
                                @foreach (TicketDTO ticket in recentActiveTickets)
                                {
                                    <li class="list-item">
                                        <a class="text-primary" href="/tickets/Index/@ticket.Id"><u>@ticket.Title</u></a>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-6">
                    <div class="card border-primary bg-faded-primary mt-3">
                        <div class="card-header border-primary text-primary">Recent archived Tickets</div>
                        <div class="card-body text-center">
                            <ul>
                                @foreach (TicketDTO ticket in recentArchivedTickets)
                                {
                                    <li class="list-item">
                                        <a class="text-primary" href="/tickets/Index/@ticket.Id"><u>@ticket.Title</u></a>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
                @* <h1 class="text-center">Charts:</h1>
            <div class="col-12">

            </div> *@
            </div>
        </AuthorizeView>
    </div>
}


@code {
    #region Parameters
    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion

    #region State
    private CompanyDTO? company;
    private string? ErrorMessage = string.Empty;
    private IEnumerable<UserDTO> Members = [];
    private UserInfo? userInfo;
    private UserDTO? user;
    private IEnumerable<TicketDTO> tickets = [];
    private IEnumerable<TicketDTO> recentActiveTickets = [];
    private IEnumerable<TicketDTO> recentArchivedTickets = [];
    private IEnumerable<ProjectDTO> projects = [];
    #endregion

    #region Methods
    protected override async Task OnInitializedAsync()
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

            if (userInfo is not null)
            {
                company = await CompanyService.GetCompanyByIdAsync(userInfo.CompanyId);
                Members = await CompanyService.GetCompanyMembersAsync(userInfo.CompanyId);
                user = Members.FirstOrDefault(m => m.UserId == userInfo.UserId);
                if (user is not null && user.Role == Roles.Admin.GetDisplayName())
                {
                    tickets = await TicketService.GetAllTicketsAsync(userInfo.CompanyId);
                    projects = await ProjectService.GetAllProjectsAsync(userInfo.CompanyId);
                    recentActiveTickets = await TicketService.GetMostRecentActiveTicketsAsync(userInfo.CompanyId);
                    recentArchivedTickets = await TicketService.GetMostRecentArchivedTicketsAsync(userInfo.CompanyId);

                }
                else
                {
                    tickets = await TicketService.GetUserTicketsAsync(userInfo.CompanyId, userInfo.UserId);
                    projects = await ProjectService.GetMyProjectsAsync(userInfo.CompanyId, userInfo.UserId);
                    recentActiveTickets = await TicketService.GetRecentUserTicketsAsync(userInfo.CompanyId, userInfo.UserId);
                    recentArchivedTickets = await TicketService.GetRecentArchivedUserTicketsAsync(userInfo.CompanyId, userInfo.UserId);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }



    #endregion
}
