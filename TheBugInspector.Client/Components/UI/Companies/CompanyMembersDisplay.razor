@inject ICompanyDTOService CompanyService

@if (User is not null)
{
    @if (IsEdit is false)
    {

        <!-- Team Style 2: Vertical -->
        <div class="card card-body card-hover bg-light border-0 text-center">
            <img src="@User.ProfilePictureUrl" class="d-block rounded-circle mx-auto mb-3" width="162" alt="@User.UserId">
            <h5 class="fw-medium fs-lg mb-1">@User.FullName</h5>
            <p class="fs-sm mb-3">@User.Role</p>
            <div class="d-flex justify-content-center">
                <AuthorizeView>
                    <div class="card-footer">
                        @if (context.User.IsInRole("Admin"))
                        {
                            <button class="btn btn-primary" @onclick="() => IsEdit = true">
                                Assign Member Role
                            </button>
                        }
                    </div>
                </AuthorizeView>
            </div>
        </div>

    }
    else if (IsEdit is true)
    {
        <EditForm Model="User">
            <DataAnnotationsValidator />

            <!-- Team Style 2: Vertical -->
            <div class="card card-body card-hover bg-light border-0 text-center">
                <img src="@User.ProfilePictureUrl" class="d-block rounded-circle mx-auto mb-3" width="162" alt="@User.UserId">
                <h5 class="fw-medium fs-lg mb-1">@User.FullName</h5>
                <p class="fs-sm mb-3">@User.Role</p>
                <label class="form-label">
                    Roles
                </label>
                <InputSelect class="form-control" @bind-Value="User.Role">
                    @foreach (Roles role in Enum.GetValues<Roles>())
                    {
                        @if (role != Roles.DemoUser)
                        {
                            <option value="@role">
                                @role.ToString()
                            </option>

                        }
                    }
                </InputSelect>
                <div class="d-flex justify-content-center">
                    <div class="card-footer">
                        <button class="btn btn-info mb-2 btn-sm w-100" @onclick="HandleSubmit">Edit Role</button>
                        <button class="btn btn-warning btn-sm w-100" @onclick="() => IsEdit = false">Cancel</button>
                    </div>
                </div>
            </div>
        </EditForm>
    }

}



@code {
    #region Parameters
    [Parameter, EditorRequired]
    public UserDTO? User { get; set; }

    [Parameter, EditorRequired]
    public UserInfo? UserInfo { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<UserDTO> OnSubmit { get; set; }
    #endregion

    #region State
    private bool IsEdit = false;
    private string? Role;
    #endregion

    #region Methods

    private async Task HandleSubmit()
    {
        try
        {
            await OnSubmit.InvokeAsync(User);

            IsEdit = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }

    #endregion
}
