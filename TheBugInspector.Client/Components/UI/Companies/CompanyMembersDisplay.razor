@inject ICompanyDTOService CompanyService

@if (User is not null)
{
    @if (IsEdit is false)
    {
        <li class="list-group-item">
            <div class="row row-cols-3">
                <div class="col">
                    <div>
                        <h5>Company Member: </h5>
                    </div>
                    <span>@User.FullName</span>

                </div>
                <div class="col">
                    <div>
                        <h5>Role in Company:</h5>
                    </div>
                    <span>@User.Role</span>
                </div>
                <div class="col">
                    <AuthorizeView>
                        @if (context.User.IsInRole("Admin"))
                        {
                            <button class="btn btn-primary text-end" @onclick="() => IsEdit = true">
                                Assign Member Role
                            </button>
                        }
                    </AuthorizeView>
                </div>

            </div>
        </li>
    }
    else if (IsEdit is true)
    {
        <EditForm Model="User">
            <DataAnnotationsValidator />
            <li class="list-group-item">
                <div class="row row-cols-3">
                    <div class="col">
                        <div>
                            <h5>Company Member: </h5>
                        </div>
                        <span>@User.FullName</span>

                    </div>
                    <div class="col">
                        <div>
                            <h5>Role in Company:</h5>
                        </div>
                        <span>@User.Role</span>

                    </div>
                    <div class="col">
                        <label class="form-label">
                            Roles
                        </label>
                        <InputSelect class="form-control" @bind-Value="User.Role">
                            @foreach (Roles role in Enum.GetValues<Roles>())
                            {
                                @if (role != Roles.DemoUser)
                                {
                                    <option value="@role">
                                        @role.ToString()
                                    </option>

                                }
                            }
                        </InputSelect>
                    </div>
                </div>
                <div class="mt-2">
                    <button class="btn btn-info" @onclick="HandleSubmit">Edit Role</button>
                    <button class="btn btn-warning" @onclick="() => IsEdit = false">Cancel</button>
                </div>
            </li>
        </EditForm>
    }

}

@code {
    #region Parameters
    [Parameter, EditorRequired]
    public UserDTO? User { get; set; }

    [Parameter, EditorRequired]
    public UserInfo? UserInfo { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<UserDTO> OnSubmit { get; set; }
    #endregion

    #region State
    private bool IsEdit = false;
    private string? Role;
    #endregion

    #region Methods

    private async Task HandleSubmit()
    {
        try
        {
            await OnSubmit.InvokeAsync(User);

            IsEdit = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }

    #endregion
}
