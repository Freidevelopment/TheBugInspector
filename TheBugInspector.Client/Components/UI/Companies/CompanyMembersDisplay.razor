@inject ICompanyDTOService CompanyService

@if (User is not null && UserInfo is not null)
{
    @if (IsEdit is false)
    {

        <div class="card card-hover border-0 bg-transparent">
            <div class="position-relative">
                <img src="@User.ProfilePictureUrl" class="rounded-3" alt="Jenny Wilson">

            </div>
            <div class="card-body text-center p-3">
                <h3 class="fs-lg fw-semibold pt-1 mb-2">@User.FullName</h3>
                @foreach (Roles role in Enum.GetValues<Roles>())
                {
                    if (role.ToString() == User.Role)
                    {
                        <p class="fs-sm mb-0">@role.GetDisplayName()</p>
                    }
                }

            </div>
            <AuthorizeView>
                @if (context.User.IsInRole("Admin") && User.UserId != UserInfo.UserId)
                {
                    <div class="card-footer text-center">
                        <button class="btn btn-primary" @onclick="() => IsEdit = true">
                            Change Role
                        </button>
                    </div>
                }
            </AuthorizeView>
        </div>
    }
    else if (IsEdit is true)
    {
        <EditForm Model="User">
            <DataAnnotationsValidator />
            <div class="card card-hover border-0 bg-transparent">
                <div class="position-relative">
                    <img src="@User.ProfilePictureUrl" class="rounded-3" alt="Jenny Wilson">

                </div>
                <div class="card-body text-center p-3">
                    <h3 class="fs-lg fw-semibold pt-1 mb-2">@User.FullName</h3>
                    @foreach (Roles role in Enum.GetValues<Roles>())
                    {
                        if (role.ToString() == User.Role)
                        {
                            <p class="fs-sm mb-0">@role.GetDisplayName()</p>
                        }
                    }
                    <label class="form-label">
                        Roles
                    </label>
                    <InputSelect class="form-control" @bind-Value="User.Role">
                        @foreach (Roles role in Enum.GetValues<Roles>())
                        {
                            @if (role != Roles.DemoUser)
                            {
                                <option value="@role">
                                    @role.GetDisplayName()
                                </option>

                            }
                        }
                    </InputSelect>
                    <div class="d-flex justify-content-center">
                        <div class="card-footer">
                            <button class="btn btn-info mb-2 btn-sm" @onclick="HandleSubmit">Edit Role</button>
                            <button class="btn btn-warning btn-sm" @onclick="() => IsEdit = false">Cancel</button>
                        </div>
                    </div>
                </div>

            </div>
        </EditForm>
    }


}



@code {
    #region Parameters
    [Parameter, EditorRequired]
    public UserDTO? User { get; set; }

    [Parameter, EditorRequired]
    public UserInfo? UserInfo { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<UserDTO> OnSubmit { get; set; }
    #endregion

    #region State
    private bool IsEdit = false;
    #endregion

    #region Methods
    private async Task HandleSubmit()
    {
        try
        {
            await OnSubmit.InvokeAsync(User);

            IsEdit = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }


    #endregion
}
