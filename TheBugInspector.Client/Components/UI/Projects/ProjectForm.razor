@if (Project is not null)
{

    <EditForm Model="Project" OnValidSubmit="HandleSubmit" class="row">
        <DataAnnotationsValidator />
@*         <div class="col-xl-6 col-lg-7 offset-xl-2"> *@
            <div class="card border-light shadow-lg py-3 p-sm-4 p-md-5">
                <div class="bg-dark position-absolute top-0 start-0 w-100 h-100 rounded-3 d-none d-dark-mode-block"></div>
                <div class="card-body position-relative zindex-2">
                    @if (string.IsNullOrEmpty(Project.Name))
                    {
                        <h2 class="card-title pb-3 mb-4">Create Project</h2>

                    }
                    else
                    {
                        <h2 class="card-title pb-3 mb-4">Edit: @Project.Name</h2>
                    }
                    <form class="row g-4 needs-validation" novalidate>
                        <div class="col-12">
                            <label for="fn" class="form-label fs-base">Project Name</label>
                            <InputText @bind-Value="Project.Name" class="form-control form-control-lg" id="fn" />
                            <ValidationMessage For="() => Project.Name" />
                        </div>

                        <div class="col-12">
                            <label for="specialist" class="form-label fs-base">Priority</label>
                            <InputSelect @bind-Value="Project.Priority" class="form-select form-select-lg" id="specialist" required>
                                <option value="" selected disabled>Choose a Priority</option>
                                @foreach (ProjectPriority priority in Enum.GetValues<ProjectPriority>())
                                {
                                    <option value="@priority">
                                        @priority.GetDisplayName()
                                    </option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => Project.Priority" />
                        </div>
                        <div class="col-sm-6">
                            <label for="date" class="form-label fs-base">Start Date</label>
                            <InputDate @bind-Value="Project.StartDate" class="form-control form-control-lg"  />
                            <ValidationMessage For="() => Project.StartDate" />
                        </div>
                        <div class="col-sm-6">
                            <label for="time" class="form-label fs-base">End Date</label>
                            <InputDate @bind-Value="Project.EndDate" class="form-control form-control-lg" />
                            <ValidationMessage For="() => Project.EndDate" />
                        </div>
                        <div class="col-12">
                            <label for="description" class="form-label fs-base">Description</label>
                            <InputTextArea @bind-Value="Project.Description" rows="8" class="form-control form-control-lg" id="email" />
                            <ValidationMessage For="() => Project.Description" />
                        </div>
                        <div class="col-12 pt-2 pt-sm-3 text-end">
                            <button type="submit" class="btn btn-lg btn-outline-primary w-100 w-sm-auto">Save</button>
                        </div>
                    </form>
                </div>
            </div>
@*         </div> *@

    </EditForm>

}




@code {
    #region Parameters
    [Parameter, EditorRequired]
    public ProjectDTO? Project { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<ProjectDTO> OnSubmit { get; set; }

    [Parameter, EditorRequired]
    public UserInfo? UserInfo { get; set; }

    [Parameter, EditorRequired]
    public bool IsNew { get; set; }
    #endregion

    #region State
    #endregion

    #region Methods
    protected override void OnInitialized()
    {
        if (IsNew == true)
        {
            if (Project is not null)
            {
                Project.StartDate = DateTime.Today;
                Project.EndDate = DateTime.Today.AddDays(7);
            }

        }

    }

    private async Task HandleSubmit()
    {
        try
        {

            await OnSubmit.InvokeAsync(Project);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }
    #endregion
}
