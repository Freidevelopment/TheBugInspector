<!-- Header and footer -->
@if (userInfo is not null && ProjectManager is not null)
{

    <div class="card text-center">
        <div class="card-header">Assign or remove members from the Project</div>
        <div class="card-body">
            <div class="row row-cols-md-2">
                <div class="col text-center">
                    <AuthorizeView Context="AssignProjectMembers">
                        @if (AssignProjectMembers.User.IsInRole("Admin") || userInfo.UserId == ProjectManager.UserId)
                        {
                            <label for="MemberAssignment" class="form-label">
                                Project Members
                            </label>
                            <InputSelect @bind-Value="MemberAssignment" class="form-select">
                                <option value="">Assign Members to Project</option>
                                @if (Employees is not null)
                                {
                                    @foreach (UserDTO? user in Employees)
                                    {
                                        if (user is not null)
                                        {
                                            bool shouldNotDisplay = Members.Any(m => m?.UserId == user.UserId);

                                            if (shouldNotDisplay == false)
                                            {
                                                if (user.Role == Roles.Developer.ToString() || user.Role == Roles.Submitter.ToString())
                                                {
                                                    <option value="@user.UserId">
                                                        @user.FullName: @user.Role
                                                    </option>

                                                }

                                            }

                                        }
                                    }

                                }
                            </InputSelect>
                            <div class="col">
                                <button class="btn btn-primary mt-3" @onclick="AssignMember">Assign Members</button>

                            </div>
                        }
                    </AuthorizeView>
                </div>
                <div class="col text-center">
                    <AuthorizeView Roles="Admin">

                        <label for="managerAssignment" class="form-label">
                            Project Manager
                        </label>
                        <InputSelect @bind-Value="ManagerAssignment" class="form-select">
                            <option value="">Assign a Manager to the project</option>
                            @if (Employees is not null)
                            {
                                @foreach (UserDTO? user in Employees)
                                {
                                    if (user is not null)
                                    {
                                        if (user.Role == Roles.ProjectManager.ToString())
                                        {
                                            <option value="@user.UserId">
                                                @user.FullName: @user.Role
                                            </option>

                                        }

                                    }
                                }

                            }
                        </InputSelect>
                        <div class="col">
                            <button class="btn btn-primary mt-3" @onclick="AssignManager">Assign Manager</button>

                        </div>
                    </AuthorizeView>
                </div>

                <div class="col text-center mt-3">
                    <AuthorizeView Context="RemoveProjectMembers">
                        @if (Members.Count() > 0)
                        {
                            @if (RemoveProjectMembers.User.IsInRole("Admin") || userInfo.UserId == ProjectManager.UserId)
                            {
                                <label for="MemberAssignment" class="form-label">
                                    Project Members
                                </label>
                                <InputSelect @bind-Value="MemberRemoval" class="form-select">
                                    <option value="">Remove Member</option>
                                    @if (Members is not null)
                                    {
                                        @foreach (UserDTO? user in Members)
                                        {
                                            if (user is not null)
                                            {
                                                if (user.Role == Roles.Developer.ToString() || user.Role == Roles.Submitter.ToString())
                                                {
                                                    <option value="@user.UserId">
                                                        @user.FullName: @user.Role
                                                    </option>

                                                }

                                            }
                                        }

                                    }
                                </InputSelect>
                                <div class="col">
                                    <button class="btn btn-danger mt-3" @onclick="RemoveMember">Remove Member</button>

                                </div>
                            }

                        }
                    </AuthorizeView>
                </div>
                <div class="col text-center">
                    <AuthorizeView Roles="Admin">
                        @if (ProjectManager is not null)
                        {
                            <button class="btn btn-danger mt-5" @onclick="RemoveManager">Remove Manager </button>

                        }
                    </AuthorizeView>
                </div>
            </div>
        </div>
        <div class="card-footer fs-sm text-muted">Welcome @userInfo.FullName</div>
    </div>

}


@code {
    #region Parameters
    [Parameter, EditorRequired]
    public UserDTO? ProjectManager { get; set; }

    [Parameter, EditorRequired]
    public IEnumerable<UserDTO?> Employees { get; set; }

    [Parameter, EditorRequired]
    public IEnumerable<UserDTO?> Members { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<string?> OnSubmit { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<string?> OnManagerSubmit { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<string?> OnMemberRemoval { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<string?> OnManagerRemoval { get; set; }


    [Parameter, EditorRequired]
    public UserInfo? userInfo { get; set; }
    #endregion

    #region State
    public string? MemberAssignment;
    public string? ManagerAssignment;
    public string? MemberRemoval;
    #endregion

    #region Methods
    private async Task AssignMember()
    {
        try
        {

            await OnSubmit.InvokeAsync(MemberAssignment);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }

    private async Task AssignManager()
    {
        try
        {

            await OnManagerSubmit.InvokeAsync(ManagerAssignment);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }
    private async Task RemoveMember()
    {
        try
        {

            await OnMemberRemoval.InvokeAsync(MemberRemoval);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }
    private async Task RemoveManager()
    {
        try
        {
            if (ProjectManager is not null)
            {
                await OnManagerRemoval.InvokeAsync(ProjectManager.UserId);

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }
    #endregion
}
