@inject ITicketDTOService TicketService
@if (Attachment is not null && userInfo is not null && ProjectManager is not null)
{
    @if (status == Status.Viewing)
    {
        <div class="card w-100 h-100">
            <div class="card-body">
                <h5 class="card-title">@Attachment.FileName</h5>
                @if (Attachment.Description is not null)
                {
                    <h6 class="card-subtitle mb-2 text-body-secondary">Description: </h6>
                    <p class="card-text">@Attachment.Description</p>

                }
                <div>
                    @{
                        string? extension = Path.GetExtension(Attachment.FileName)?.Trim('.') ?? "default";
                    }
                </div>
                <p class="card-text">@Attachment.Created.ToString("f")</p>
                <p class="card-text">Submitted By: @userInfo.FullName</p>
                <a href="@Attachment.UploadUrl" class="card-link"><img src="@($"png/{extension}.png")" class="img-fluid" /></a>

                <AuthorizeView>
                    @if (Attachment.UserId == userInfo.UserId)
                    {
                        <button class="btn btn-primary" @onclick="() => status = Status.Updating"><i class="bi bi-pencil-fill"></i></button>
                        <button class="btn btn-danger" @onclick="() => status = Status.Deleting"><i class="bi bi-trash-fill"></i></button>
                    }
                    else if (context.User.IsInRole("Admin") ||
                    context.User.IsInRole("ProjectManager") && userInfo.UserId == ProjectManager.UserId)
                    {
                        <button class="btn btn-danger" @onclick="() => status = Status.Deleting"><i class="bi bi-trash-fill"></i></button>
                    }
                </AuthorizeView>
            </div>
        </div>

    }
    else if (status == Status.Updating)
    {
        <div class="card w-100 h-100">
            <div class="card-body">
                <EditForm Model="Attachment" class="vstack gap-1">
                    <h5>Change File Ticket</h5>
                    <h5 class="card-title">@Attachment.FileName</h5>
                    <InputFile OnChange="e => newFile = e.File" />
                    @if (Attachment.Description is not null)
                    {
                        <h6 class="card-subtitle mb-2 text-body-secondary">Description: </h6>
                        <p class="card-text">@Attachment.Description</p>
                        <InputText @bind-Value="Attachment.Description"
                                   class="form-control"
                                   placeholder="Description (optional)">
                        </InputText>
                    }
                    <div>
                        @{
                            string? extension = Path.GetExtension(Attachment.FileName)?.Trim('.') ?? "default";
                        }
                    </div>
                    <p class="card-text">@Attachment.Created.ToString("f")</p>
                    <p class="card-text">Submitted By: @userInfo.FullName</p>
                    <a href="@Attachment.UploadUrl" class="card-link"><img src="@($"png/{extension}.png")" class="img-fluid" /></a>
                </EditForm>
                <div class="card-footer">
                    <span class="text-info">Do you wish to edit your Attachment?</span>
                    <button class="btn btn-info" @onclick="HandleSubmit"><i class="bi bi-pencil-fill"></i></button>
                    <button class="btn btn-danger" @onclick="() => status = Status.Viewing"><i class="bi bi-x-circle"></i></button>

                </div>

            </div>
        </div>
    }
    @if (status == Status.Deleting)
    {
        <div class="card" style="width: 18rem;">
            <div class="card-body">
                <h5 class="card-title">@Attachment.FileName</h5>
                <h6 class="card-subtitle mb-2 text-body-secondary">Description of Attachment</h6>
                <p class="card-text">@Attachment.Description</p>
                <p class="card-text">@Attachment.Created.ToString("f")</p>
                @if (Attachment.User is not null)
                {
                    <p class="card-text">Submitted By: @Attachment.User.FullName</p>

                }
                <a href="#" class="card-link">@Attachment.UploadUrl</a>

                @if (Attachment.UserId == userInfo.UserId)
                {
                    <span class="text-danger">do you want to delete this Attachment?</span>
                    <button class="btn btn-danger" @onclick="HandleDelete">Delete Attachment</button>
                    <button class="btn btn-info" @onclick="() => status = Status.Viewing"><i class="bi bi-x-circle"></i></button>
                }
            </div>
        </div>
    }

}

@code {
    #region Parameters
    [Parameter, EditorRequired]
    public TicketAttachmentDTO? Attachment { get; set; }

    [Parameter, EditorRequired]
    public UserDTO? ProjectManager { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<int> OnSubmit { get; set; }

    [Parameter]
    public UserInfo? userInfo { get; set; }

    private IBrowserFile? newFile; // <- this is bound to the file input element

    [Parameter]
    public EventCallback OnChange { get; set; }
    #endregion

    #region State
    private enum Status
    {
        Viewing,
        Updating,
        Deleting
    }

    private Status status = Status.Viewing;
    private string? ErrorMessage = string.Empty;
    #endregion

    #region Methods

    private async Task HandleDelete()
    {
        if (Attachment is not null)
        {
        await OnSubmit.InvokeAsync(Attachment.Id);

        }

        status = Status.Viewing;
    }

    private async Task HandleSubmit()
    {
        if (newFile is not null && Attachment is not null && userInfo is not null)
        {
            ErrorMessage = string.Empty;

            // get the byte[] and ContentType from the selected file
            using var stream = newFile.OpenReadStream();
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);

            byte[] fileData = ms.ToArray();
            string fileType = newFile.ContentType;
            Attachment.FileName = newFile.Name;

            try
            {
                // send the model and file data to the service
                await TicketService.AddTicketAttachment(Attachment,
                                                        fileData,
                                                        fileType,
                                                        userInfo.CompanyId);
            }
            catch (Exception ex)
            {
                // TODO: display an error message if, e.g. file is too big
                // or there was an error uploading the file
                ErrorMessage = "The File is either too large to send or there was an error or there was and error uploading the file";
                Console.WriteLine(ex);
            }

            // reset the form after this was successful
            newFile = null;
            Attachment = new()
                {
                    UserId = userInfo.UserId,
                    TicketId = Attachment.TicketId,
                    Created = DateTime.Now
                };

            // this can be replaced with however you want to update the page
            // after a file was saved
            await OnChange.InvokeAsync();
        }
    }
    #endregion
}
