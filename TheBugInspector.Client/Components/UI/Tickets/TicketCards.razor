@if (Ticket is not null)
{

    <tr>
        <th scope="row"><a class="nav-link text-primary" href="/tickets/Index/@Ticket.Id"><u>@Ticket.Title</u></a></th>
        <td>@Ticket.Created.ToString("g")</td>
        @if (Ticket.Updated is not null)
        {
            <td>@Ticket.Updated.Value.ToString("D")</td>

        }
        else
        {
            <td>This Ticket has not been updated</td>
        }
        <td>@Ticket.Type.GetDisplayName()</td>
        <td>@Ticket.Priority.GetDisplayName()</td>
        <td>@Ticket.Status.GetDisplayName()</td>
        @if (Ticket.SubmitterUser is not null)
        {
            <td>@Ticket.SubmitterUser.FullName</td>

        }
        <td>@Ticket.Comments.Count()</td>
        @if (Ticket.IsArchived is false)
        {
            <td><button class="btn btn-success" @onclick="HandleArchive">Archive</button></td>

        }
        else if (Ticket.IsArchived is true)
        {
            <td><button class="btn btn-success" @onclick="HandleRestore">Restore</button></td>
        }
    </tr>

}


@code {
    #region Parameters
    [Parameter, EditorRequired]
    public TicketDTO? Ticket { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<int> OnRestore { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<int> OnArchive { get; set; }
    #endregion

    #region State
    private string? backgroundColor = string.Empty;
    #endregion

    #region Methods
    private async Task HandleArchive()
    {
        if (Ticket is not null)
        {
            await OnArchive.InvokeAsync(Ticket.Id);

        }
    }
    private async Task HandleRestore()
    {
        if (Ticket is not null)
        {
            await OnRestore.InvokeAsync(Ticket.Id);

        }
    }
    #endregion
}
