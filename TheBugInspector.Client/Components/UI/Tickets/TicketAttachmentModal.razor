@using FreiBlogBuilder.Client.Helpers
@using TheBugInspector.Client.Helpers
@inject ITicketDTOService TicketService

<div class="modal-dialog modal-xl modal-dialog-centered">
    <div class="modal-content">
        <EditForm Model="newAttachment" OnSubmit="HandleSubmit" class="vstack gap-1">
            <DataAnnotationsValidator />
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="AttachmentLabel">Add File to Ticket</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <InputFile OnChange="e => newFile = e.File" />
                <InputText @bind-Value="newAttachment.Description"
                           class="form-control"
                           placeholder="Description (optional)">
                </InputText>
                <ValidationMessage For="() => newAttachment" />
                <span class="text-danger">@ErrorMessage</span>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Upload</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public int TicketId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState>? AuthStateTask { get; set; }
    private UserInfo? userInfo;

    private TicketAttachmentDTO newAttachment = new();
    private IBrowserFile? newFile; // <- this is bound to the file input element

    [Parameter]
    public EventCallback OnChange { get; set; }

    private string? ErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // get the current user's information
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

        // fill out the fields we know about already
        newAttachment.UserId = userInfo.UserId;
        newAttachment.TicketId = TicketId;
        newAttachment.Created = DateTime.Now;


    }

    private async Task HandleSubmit()
    {
        if (newFile is not null)
        {
            ErrorMessage = string.Empty;

            // get the byte[] and ContentType from the selected file
            using var stream = newFile.OpenReadStream();
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);

            byte[] fileData = ms.ToArray();
            string fileType = newFile.ContentType;
            newAttachment.FileName = newFile.Name;

            try
            {

                // send the model and file data to the service
                await TicketService.AddTicketAttachment(newAttachment,
                                                        fileData,
                                                        fileType,
                                                        userInfo.CompanyId);


            }
            catch (Exception ex)
            {
                // TODO: display an error message if, e.g. file is too big
                // or there was an error uploading the file
                ErrorMessage = "The File is either too large to send or there was an error or there was and error uploading the file";
                Console.WriteLine(ex);
            }

            // reset the form after this was successful
            newFile = null;
            newAttachment = new()
                {

                    UserId = userInfo.UserId,
                    TicketId = TicketId,
                    Created = DateTime.Now
                };



            // this can be replaced with however you want to update the page
            // after a file was saved
            await OnChange.InvokeAsync();
        }
    }
}
