@if (ticketComment is not null && userInfo is not null)
{


    <EditForm Model="ticketComment" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <div class="card border-0 pt-2 p-md-2 p-xl-3 p-xxl-4 mt-n3 mt-md-0">
            <div class="card-body">
                <h2 class="pb-2 pb-lg-3 pb-xl-4">Leave a comment</h2>
                <div class="col-12">
                    <label class="form-label" for="c-comment">Comment</label>
                    <InputTextArea class="form-control" rows="3" @bind-Value="ticketComment.Content">
                    </InputTextArea>
                    <ValidationMessage For="() => ticketComment.Content" />
                </div>
                <div class="col-12 mt-2 text-end">
                    <button class="btn btn-outline-primary" type="submit">Post Comment</button>
                    <div>
                        @userInfo.FullName
                    </div>
                </div>

            </div>
        </div>
    </EditForm>
}

@code {
    #region Parameters
    [Parameter, EditorRequired]
    public TicketCommentDTO? ticketComment { get; set; }

    [Parameter, EditorRequired]
    public int Id { get; set; }

    [Parameter]
    public UserInfo? userInfo { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<TicketCommentDTO> OnSubmit { get; set; }
    #endregion

    #region State
    #endregion

    #region Methods

    protected override void OnInitialized()
    {
        try
        {
            if (userInfo is not null && ticketComment is not null)
            {
                ticketComment.TicketId = Id;
                ticketComment.UserId = userInfo.UserId;

            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            await OnSubmit.InvokeAsync(ticketComment);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }
    #endregion
}
