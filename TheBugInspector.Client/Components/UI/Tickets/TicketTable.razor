@inject IProjectDTOService ProjectService

@if (Ticket is not null)
{

    <tr>
        <th scope="row"><a class="nav-link text-primary" href="/tickets/Index/@Ticket.Id"><u>@Ticket.Title</u></a></th>
        <td>@Ticket.Created.ToString("g")</td>
        @if (Ticket.Updated is not null)
        {
            <td>@Ticket.Updated.Value.ToString("D")</td>

        }
        else
        {
            <td>This Ticket has not been updated</td>
        }
        @if (project is not null)
        {
            <td>@project.Name</td>

        }
        <td>@Ticket.Priority.GetDisplayName()</td>
        <td>@Ticket.Status.GetDisplayName()</td>
        @if (Ticket.SubmitterUser is not null)
        {
            <td>@Ticket.SubmitterUser.FullName</td>

        }
        <td>@Ticket.Comments.Count()</td>
        <AuthorizeView>
            @if (project is not null && UserInfo is not null)
            {

                @if (context.User.IsInRole("Admin") || project.CompanyMembers.Any(c => c.UserId == UserInfo.UserId) && context.User.IsInRole("ProjectManager"))
                {
                    @if (Ticket.IsArchived is false)
                    {
                        <td><button class="btn btn-success" @onclick="HandleArchive">Archive</button></td>

                    }
                    else if (Ticket.IsArchived is true)
                    {
                        <td><button class="btn btn-success" @onclick="HandleRestore">Restore</button></td>
                    }

                }
            }
        </AuthorizeView>
    </tr>

}


@code {
    #region Parameters
    [Parameter, EditorRequired]
    public TicketDTO? Ticket { get; set; }

    [Parameter, EditorRequired]
    public UserInfo? UserInfo { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<int> OnRestore { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<int> OnArchive { get; set; }
    #endregion

    #region State
    private string? backgroundColor = string.Empty;
    private ProjectDTO? project;
    #endregion

    #region Methods
    protected override async Task OnParametersSetAsync()
    {
        if (Ticket is not null && UserInfo is not null)
        {
            project = await ProjectService.GetProjectByIdAsync(Ticket.ProjectId, UserInfo.CompanyId);

        }
    }
    private async Task HandleArchive()
    {
        if (Ticket is not null)
        {
            await OnArchive.InvokeAsync(Ticket.Id);

        }
    }
    private async Task HandleRestore()
    {
        if (Ticket is not null)
        {
            await OnRestore.InvokeAsync(Ticket.Id);

        }
    }
    #endregion
}
