@using TheBugInspector.Client.Helpers
@inject IProjectDTOService ProjectService

@if (Ticket is not null)
{

    <EditForm Model="Ticket" OnValidSubmit="HandleSubmit" class="row">
        <DataAnnotationsValidator />

        @* Name *@
        <div class="card border-light shadow-lg">
            <div class="bg-dark position-absolute top-0 start-0 w-100 h-100 rounded-3 d-none d-dark-mode-block"></div>
            <div class="card-body position-relative zindex-2">

                @if (string.IsNullOrEmpty(Ticket.Title))
                {
                    <h2 class="card-title pb-3 mb-4">Create Ticket</h2>

                }
                else
                {
                    <h2 class="card-title pb-3 mb-4">Edit: @Ticket.Title</h2>
                }
                <div class="row">


                    <div class="col-12 col-lg-3 gap-2">
                        <div class="mb-2">
                            <label class="form-label">
                                Ticket Name
                            </label>
                            <InputText class="form-control" @bind-Value="Ticket.Title" />
                            <ValidationMessage For="() => Ticket.Title" />
                        </div>
                    </div>
                    @* Ticket *@
                    @if (Ticket.Project is not null)
                    {
                        <div class="col-12 col-lg-3">
                            <div class="mb-2 mt-1">
                                <label for="priority" class="form-label">
                                    For Project: @Ticket.Project.Name
                                </label>
                            </div>
                        </div>
                    }
                    @* Type *@
                    <div class="col-12 col-lg-3">

                        <div class="mb-2">
                            <label for="priority" class="form-label">
                                Ticket Type
                            </label>
                            <InputSelect @bind-Value="Ticket.Type" class="form-select">
                                <option value="">Select a Ticket Type</option>
                                @foreach (TicketType type in Enum.GetValues<TicketType>())
                                {
                                    <option value="@type">
                                        @type.GetDisplayName()
                                    </option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => Ticket.Type" />
                        </div>
                    </div>
                    @* Priority *@
                    <div class="col-12 col-lg-3">

                        <div class="mb-2">
                            <label for="priority" class="form-label">
                                Ticket Priority
                            </label>
                            <InputSelect @bind-Value="Ticket.Priority" class="form-select">
                                <option value="">Select a Ticket Priority</option>
                                @foreach (TicketPriority priority in Enum.GetValues<TicketPriority>())
                                {
                                    <option value="@priority">
                                        @priority.GetDisplayName()
                                    </option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => Ticket.Priority" />
                        </div>
                    </div>
                    @if (IsNew == false)
                    {
                        <div class="col-12 col-lg-3">
                            @* Status *@
                            <div class="mb-2">
                                <label for="priority" class="form-label">
                                    Ticket Status
                                </label>
                                <InputSelect @bind-Value="Ticket.Status" class="form-select">
                                    <option value="">Select a Ticket Status</option>
                                    @foreach (TicketStatus status in Enum.GetValues<TicketStatus>())
                                    {
                                        <option value="@status">
                                            @status.GetDisplayName()
                                        </option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="() => Ticket.Status" />
                            </div>
                        </div>
                    }


                    @* Description *@
                    <div class="col-12">
                        <div class="mb-2">
                            <label class="form-label">Ticket Description</label>
                            <div class="mt-2">
                                @Ticket.Description
                            </div>
                        </div>
                    </div>
                    <div class="col-12 pt-2 pt-sm-3 text-end">
                        <button type="submit" class="btn btn-lg btn-outline-primary w-100 w-sm-auto">Save</button>
                    </div>
                </div>
            </div>
        </div>

        <ValidationSummary />
    </EditForm>



}




@code {
    #region Parameters
    [Parameter, EditorRequired]
    public TicketDTO? Ticket { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<TicketDTO> OnSubmit { get; set; }

    [Parameter, EditorRequired]
    public bool IsNew { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion

    #region State
    private IEnumerable<ProjectDTO> projects = [];


    private UserInfo? userInfo;
    #endregion

    #region Methods
    protected override async Task OnInitializedAsync()
    {
        try
        {

            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
            if (userInfo is not null)
            {
                projects = await ProjectService.GetAllProjectsCountAsync(userInfo.CompanyId);

            }


        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }
    private async Task HandleSubmit()
    {
        try
        {

            await OnSubmit.InvokeAsync(Ticket);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }
    #endregion
}